{"ast":null,"code":"var _jsxFileName = \"/Users/shinoharatsubasa/Documents/RocketSim_New_2d_integ/src/components/rocket/RocketSimulator.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// メインのシミュレーターコンポーネント\nimport React, { useState, useCallback, useEffect, useMemo, useRef } from 'react';\n\n// 定数とデータ定義のインポート\nimport { SVG_CONFIG, MOTOR_THRUST_DATA, PARACHUTE_SIZES, FIN_MATERIALS, NOSE_SHAPES, WIND_PROFILES, PHYSICAL_CONSTANTS, ANGLE_RESPONSE_DT, ANGLE_STEPS_PER_UPDATE, ANIMATION_SPEED, SLIDER_DEBOUNCE_TIME, mmToM, gToKg, UI_CONFIG, ANALYSIS_VIEW_CONFIG } from './RocketConstants';\n\n// 物理計算関連のインポート\nimport { calculateProjectedArea, calculateVolume, calculateCenterOfPressure, calculateAerodynamicCenter, calculateStabilityCenterOfPressure, calculateStaticMargin, calculateFinDivergenceSpeed, calculateFinFlutterSpeed, formatFinDeflection, formatSpeedValue, calculateWindSpeedAtHeight, calculateFlightPath } from './RocketPhysics';\n\n// SVG描画関連のインポート\nimport { getNosePath, getBodyPath, getLeftFinPath, getRightFinPath, getCenterFinsPath, getParachutePath, getParachuteStringPaths, getWindArrow, getWindProfileArrows, metersToSvgX, metersToSvgY, getActualRocketDimensions, getSafeRotationTransform, getAnalysisViewBox, getDesignViewBox, getRocketTransform, getSafeValue } from './RocketRendering';\n\n// UI関連のコンポーネントのインポート\nimport { WindAngleLimitVisualizer, ResultsPopup, LastFlightResults, ParameterSlider, DesignTab, AnalysisTab } from './RocketUIComponents';\n\n// ロケットデザインとシミュレーションを統合したカスタムフック\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useRocketSimulator = () => {\n  _s();\n  // 初期値を明示的に設定することで、undefinedやnullが発生しない\n  const initialRocketState = {\n    noseShape: \"ogive\",\n    noseHeight: 57,\n    bodyHeight: 255,\n    bodyWidth: 31,\n    finHeight: 58.5,\n    finBaseWidth: 65,\n    finTipWidth: 25,\n    finThickness: 1.5,\n    finSweepLength: 95,\n    finMaterial: \"light_veneer\",\n    weight: 50,\n    centerOfGravity: 150\n  };\n\n  // Design parameters\n  const [noseShape, setNoseShape] = useState(\"ogive\");\n  const [noseHeight, setNoseHeight] = useState(57); // 57mmに変更\n  const [bodyHeight, setBodyHeight] = useState(255); // 255mmに変更\n  const [bodyWidth, setBodyWidth] = useState(31);\n  const [finHeight, setFinHeight] = useState(58.5); // 58.5mmに変更\n  const [finBaseWidth, setFinBaseWidth] = useState(65); // 65mmに変更\n  const [finTipWidth, setFinTipWidth] = useState(25); // 25mmに変更\n  const [finThickness, setFinThickness] = useState(1.5); // 1.5mmに変更\n  const [finSweepLength, setFinSweepLength] = useState(95); // 95mmに変更\n  const [finMaterial, setFinMaterial] = useState(\"light_veneer\");\n  // フィン枚数状態を追加\n  const [finCount, setFinCount] = useState(4); // デフォルトは4枚\n\n  // Analysis parameters - weight変数の宣言を初期化前の参照より前に移動\n  const [weight, setWeight] = useState(50);\n  const [centerOfGravity, setCenterOfGravity] = useState(150);\n  const [selectedMotor, setSelectedMotor] = useState(\"A8-3\");\n  const [selectedParachute, setSelectedParachute] = useState(\"φ300\");\n\n  // Simulation parameters\n  const [launchAngle, setLaunchAngle] = useState(0);\n  const [windSpeed, setWindSpeed] = useState(0);\n  const [windProfile, setWindProfile] = useState(\"uniform\");\n  const [showWindArrows, setShowWindArrows] = useState(true);\n\n  // 2. rocketSimの初期状態が完全に構築されてから計算や描画を行うための状態\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  // 初期化完了を検出するuseEffect\n  useEffect(() => {\n    // すべての必要な値が初期化されたことを確認\n    if (noseShape && typeof noseHeight === 'number' && typeof bodyHeight === 'number' && typeof bodyWidth === 'number' && typeof finHeight === 'number' && typeof finBaseWidth === 'number' && typeof finTipWidth === 'number' && typeof finThickness === 'number' && typeof finSweepLength === 'number' && typeof weight === 'number' && typeof centerOfGravity === 'number') {\n      setIsInitialized(true);\n    }\n  }, [noseShape, noseHeight, bodyHeight, bodyWidth, finHeight, finBaseWidth, finTipWidth, finThickness, finSweepLength, weight, centerOfGravity]);\n\n  // Simulation state\n  const [isLaunched, setIsLaunched] = useState(false);\n  const [flightData, setFlightData] = useState([]);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [animationId, setAnimationId] = useState(null);\n  const [trajectoryScale, setTrajectoryScale] = useState(1.0);\n  const [rocketScale, setRocketScale] = useState(0.1);\n  const [currentHeight, setCurrentHeight] = useState(0);\n  const [currentSpeed, setCurrentSpeed] = useState(0);\n  const [currentDistance, setCurrentDistance] = useState(0);\n  const [currentFinDeflection, setCurrentFinDeflection] = useState(0);\n  const [currentMaxHeight, setCurrentMaxHeight] = useState(0);\n  const [currentMaxSpeed, setCurrentMaxSpeed] = useState(0);\n  const [currentMaxDistance, setCurrentMaxDistance] = useState(0);\n  const [currentMaxFinDeflection, setCurrentMaxFinDeflection] = useState(0);\n  const [completedFlights, setCompletedFlights] = useState([]);\n  const [keyPoints, setKeyPoints] = useState({});\n\n  // 状態変数の追加\n  const [showResultsPopup, setShowResultsPopup] = useState(false);\n  const [flightResults, setFlightResults] = useState(null);\n  const [lastFlightResults, setLastFlightResults] = useState(null);\n\n  // 新しく追加した状態変数\n  const [projectedAreas, setProjectedAreas] = useState(null);\n  const [volumes, setVolumes] = useState(null);\n  const [pressureCenter, setPressureCenter] = useState(null);\n  const [aerodynamicCenter, setAerodynamicCenter] = useState(null);\n  const [stabilityCenterOfPressure, setStabilityCenterOfPressure] = useState(null);\n  const [staticMargins, setStaticMargins] = useState(null);\n\n  // 物理計算のための全パラメータをまとめる\n  const simulationParams = useMemo(() => ({\n    noseShape,\n    noseHeight,\n    bodyHeight,\n    bodyWidth,\n    finHeight,\n    finBaseWidth,\n    finTipWidth,\n    finThickness,\n    finSweepLength,\n    finMaterial,\n    weight,\n    centerOfGravity,\n    selectedMotor,\n    selectedParachute\n  }), [noseShape, noseHeight, bodyHeight, bodyWidth, finHeight, finBaseWidth, finTipWidth, finThickness, finSweepLength, finMaterial, weight, centerOfGravity, selectedMotor, selectedParachute]);\n\n  // useRocketSimulator内で、noseShapeの状態変更を正しく伝播するように修正\n  const setNoseShapeAndUpdate = shape => {\n    setNoseShape(shape);\n    // その他の更新は依存関係に基づいてuseEffectで自動的に行われる\n  };\n\n  // スライダーの動きをスムーズにするためのdebounce用ref\n  const sliderTimeoutRef = useRef(null);\n\n  // スライダーのリファレンスを保持するための変数\n  const noseHeightInputRef = useRef(null);\n  const bodyHeightInputRef = useRef(null);\n  const bodyWidthInputRef = useRef(null);\n  const finHeightInputRef = useRef(null);\n  const finBaseWidthInputRef = useRef(null);\n  const finTipWidthInputRef = useRef(null);\n  const finThicknessInputRef = useRef(null);\n  const finSweepLengthInputRef = useRef(null);\n  const weightInputRef = useRef(null);\n  const centerOfGravityInputRef = useRef(null);\n  const launchAngleInputRef = useRef(null);\n  const windSpeedInputRef = useRef(null);\n\n  // スムーズなスライダー操作のためのdebounce関数\n  const debounce = func => {\n    // デバウンスを実質的に無効化して直接値を更新\n    return (...args) => {\n      func(...args);\n    };\n  };\n\n  // スライダー値の更新処理をよりダイレクトにするハンドラーを追加\n  const handleSliderChange = useCallback((ref, setter) => {\n    // マウスイベントの処理関数\n    const updateValueFromEvent = event => {\n      if (!ref.current) return;\n      const rect = ref.current.getBoundingClientRect();\n      const width = rect.width;\n      const left = rect.left;\n\n      // マウス位置をスライダー内の相対位置(0～1)に変換\n      let relativeX = (event.clientX - left) / width;\n      // 範囲外の場合はクランプ(0～1に制限)\n      relativeX = Math.max(0, Math.min(1, relativeX));\n\n      // スライダーの最小値と最大値\n      const min = Number(ref.current.min);\n      const max = Number(ref.current.max);\n      const step = Number(ref.current.step) || 1;\n\n      // 相対位置から実際の値を計算\n      let newValue = min + relativeX * (max - min);\n\n      // 設定されたstepに基づいて値を丸める\n      if (step !== 0) {\n        newValue = Math.round(newValue / step) * step;\n      }\n\n      // 念のため、最終値を最小値と最大値の範囲内に収める\n      newValue = Math.max(min, Math.min(max, newValue));\n\n      // 値を更新 - 常にNumberとして扱う\n      setter(Number(newValue));\n    };\n    return {\n      // 値変更イベント(標準のonChange) - 明示的にNumberに変換\n      onChange: e => setter(Number(e.target.value)),\n      // トラックのクリックイベント(スライダー上の任意の位置)\n      onClick: updateValueFromEvent,\n      // スライダーのドラッグ開始\n      onMouseDown: startEvent => {\n        // ドキュメント全体でのマウス移動を監視\n        const handleMouseMove = moveEvent => {\n          moveEvent.preventDefault();\n          updateValueFromEvent(moveEvent);\n        };\n\n        // マウスボタンを離したときの処理\n        const handleMouseUp = () => {\n          document.removeEventListener('mousemove', handleMouseMove);\n          document.removeEventListener('mouseup', handleMouseUp);\n        };\n\n        // 最初のクリック位置で値を更新\n        updateValueFromEvent(startEvent);\n\n        // ドキュメント全体にイベントリスナーを追加\n        document.addEventListener('mousemove', handleMouseMove);\n        document.addEventListener('mouseup', handleMouseUp);\n      },\n      // タッチデバイス対応\n      onTouchStart: startEvent => {\n        if (!startEvent.touches[0]) return;\n        const handleTouchMove = moveEvent => {\n          if (!moveEvent.touches[0]) return;\n          moveEvent.preventDefault();\n          const touch = moveEvent.touches[0];\n          const mockEvent = {\n            clientX: touch.clientX,\n            clientY: touch.clientY\n          };\n          updateValueFromEvent(mockEvent);\n        };\n        const handleTouchEnd = () => {\n          document.removeEventListener('touchmove', handleTouchMove);\n          document.removeEventListener('touchend', handleTouchEnd);\n        };\n        const touch = startEvent.touches[0];\n        const mockEvent = {\n          clientX: touch.clientX,\n          clientY: touch.clientY\n        };\n        updateValueFromEvent(mockEvent);\n        document.addEventListener('touchmove', handleTouchMove, {\n          passive: false\n        });\n        document.addEventListener('touchend', handleTouchEnd);\n      }\n    };\n  }, []);\n\n  // Design display dimensions\n  const design = useMemo(() => ({\n    width: UI_CONFIG.designViewWidth,\n    height: UI_CONFIG.designViewHeight,\n    centerX: UI_CONFIG.designViewWidth / 2\n  }), []);\n  const analysis = useMemo(() => ({\n    width: UI_CONFIG.analysisViewWidth,\n    height: UI_CONFIG.analysisViewHeight,\n    centerX: UI_CONFIG.analysisViewWidth / 2\n  }), []);\n\n  // メートル単位からSVG座標への変換関数の修正版\n  const convertMetersToSvgX = useCallback(meters => {\n    return metersToSvgX(meters, trajectoryScale);\n  }, [trajectoryScale]);\n  const convertMetersToSvgY = useCallback(meters => {\n    return metersToSvgY(meters, trajectoryScale);\n  }, [trajectoryScale]);\n\n  // 実際のロケット寸法を計算するためのラッパー\n  const getRocketDimensions = useCallback(config => {\n    return getActualRocketDimensions(config, noseHeight, bodyHeight, finSweepLength, finTipWidth, finBaseWidth);\n  }, [noseHeight, bodyHeight, finSweepLength, finTipWidth, finBaseWidth]);\n\n  // 視覚化のための風速高度分布矢印ラッパー\n  const getWindArrows = useCallback((baseWindSpeed, profile) => {\n    return getWindProfileArrows(baseWindSpeed, profile, showWindArrows, convertMetersToSvgY, calculateWindSpeedAtHeight);\n  }, [showWindArrows, convertMetersToSvgY]);\n\n  // パラシュート描画関数のラッパー\n  const getParachute = useCallback((x, y, isOpen, deploymentProgress, rotation) => {\n    const rocketLength = mmToM(noseHeight + bodyHeight);\n    return getParachutePath(x, y, isOpen, deploymentProgress, rotation, rocketLength, selectedParachute, trajectoryScale);\n  }, [noseHeight, bodyHeight, selectedParachute, trajectoryScale]);\n  const getParachuteStrings = useCallback((x, y, isOpen, deploymentProgress, rotation) => {\n    const rocketLength = mmToM(noseHeight + bodyHeight);\n    return getParachuteStringPaths(x, y, isOpen, deploymentProgress, rotation, rocketLength, selectedParachute, trajectoryScale);\n  }, [noseHeight, bodyHeight, selectedParachute, trajectoryScale]);\n\n  // viewBox計算関数のラッパー\n  const computeDesignViewBox = useCallback(() => {\n    return getDesignViewBox(design, noseHeight, bodyHeight, finHeight, finSweepLength, finTipWidth, finBaseWidth, bodyWidth);\n  }, [design, noseHeight, bodyHeight, finHeight, finSweepLength, finTipWidth, finBaseWidth, bodyWidth]);\n  const computeAnalysisViewBox = useCallback(() => {\n    return getAnalysisViewBox(analysis, noseHeight, bodyHeight, finHeight, finSweepLength, finTipWidth, finBaseWidth, bodyWidth);\n  }, [analysis, noseHeight, bodyHeight, finHeight, finSweepLength, finTipWidth, finBaseWidth, bodyWidth]);\n\n  // 初期化後の計算値の更新\n  useEffect(() => {\n    if (!isInitialized) return;\n\n    // 投影面積、体積、圧力中心位置、空力中心位置を計算\n    const areas = calculateProjectedArea(simulationParams);\n    const volumeData = calculateVolume(simulationParams);\n    const cpData = calculateCenterOfPressure(simulationParams);\n    const acData = calculateAerodynamicCenter(simulationParams);\n    const stabilityCpData = calculateStabilityCenterOfPressure(simulationParams);\n    const margins = calculateStaticMargin(simulationParams);\n\n    // 状態を更新\n    setProjectedAreas(areas);\n    setVolumes(volumeData);\n    setPressureCenter(cpData);\n    setAerodynamicCenter(acData);\n    setStabilityCenterOfPressure(stabilityCpData);\n    setStaticMargins(margins);\n  }, [isInitialized, simulationParams]);\n\n  // 動的に計算結果を更新する\n  useEffect(() => {\n    // 投影面積、体積、圧力中心位置、空力中心位置を計算\n    const areas = calculateProjectedArea(simulationParams);\n    const volumeData = calculateVolume(simulationParams);\n    const cpData = calculateCenterOfPressure(simulationParams);\n    const acData = calculateAerodynamicCenter(simulationParams);\n    const stabilityCpData = calculateStabilityCenterOfPressure(simulationParams);\n    const margins = calculateStaticMargin(simulationParams);\n\n    // 状態を更新\n    setProjectedAreas(areas);\n    setVolumes(volumeData);\n    setPressureCenter(cpData);\n    setAerodynamicCenter(acData);\n    setStabilityCenterOfPressure(stabilityCpData);\n    setStaticMargins(margins);\n  }, [simulationParams]);\n\n  // 計算結果のキャッシュ\n  const calculations = useMemo(() => {\n    // 機体本体の高さ\n    const actualRocketHeight = noseHeight + bodyHeight;\n    // フィンの後端がボディ後端よりも出る場合の計算\n    const finExtension = Math.max(0, finSweepLength + finTipWidth - finBaseWidth);\n    // 全長は機体長 + フィン後端部分\n    const totalHeight = actualRocketHeight + finExtension;\n\n    // 圧力中心位置と空力中心位置（新しい計算結果を使用）\n    const cp = (pressureCenter === null || pressureCenter === void 0 ? void 0 : pressureCenter.centerOfPressure) || totalHeight * 0.7;\n    const ac = (aerodynamicCenter === null || aerodynamicCenter === void 0 ? void 0 : aerodynamicCenter.aerodynamicCenter) || totalHeight * 0.65;\n    const stabilityCp = (stabilityCenterOfPressure === null || stabilityCenterOfPressure === void 0 ? void 0 : stabilityCenterOfPressure.stabilityCenterOfPressure) || totalHeight * 0.6;\n\n    // 姿勢安定性マージン - 重心位置との距離\n    const standardMargin = (staticMargins === null || staticMargins === void 0 ? void 0 : staticMargins.standardStaticMargin) || (cp - centerOfGravity) / bodyWidth;\n    const stabilityMargin = (staticMargins === null || staticMargins === void 0 ? void 0 : staticMargins.stabilityStaticMargin) || (stabilityCp - centerOfGravity) / bodyWidth;\n\n    // 新しい計算関数を使用してフィン限界速度を計算\n    const rocketParams = {\n      noseHeight,\n      bodyHeight,\n      bodyWidth,\n      finHeight,\n      finBaseWidth,\n      finTipWidth,\n      finThickness,\n      finSweepLength,\n      finMaterial,\n      centerOfGravity,\n      weight\n    };\n    const finDivergenceSpeed = calculateFinDivergenceSpeed(rocketParams);\n    const finFlutterSpeed = calculateFinFlutterSpeed(rocketParams);\n    return {\n      totalHeight: totalHeight,\n      actualRocketHeight: actualRocketHeight,\n      finExtension: finExtension,\n      aerodynamicCenter: Math.round(ac),\n      pressureCenter: Math.round(cp),\n      stabilityCenterOfPressure: Math.round(stabilityCp),\n      standardStaticMargin: standardMargin.toFixed(2),\n      stabilityStaticMargin: stabilityMargin.toFixed(2),\n      finDivergenceSpeed: Math.round(finDivergenceSpeed),\n      finFlutterSpeed: Math.round(finFlutterSpeed),\n      // フォーマット済みの値を追加\n      finDivergenceSpeedDisplay: formatSpeedValue(finDivergenceSpeed),\n      finFlutterSpeedDisplay: formatSpeedValue(finFlutterSpeed)\n    };\n  }, [noseHeight, bodyHeight, finSweepLength, finTipWidth, finBaseWidth, bodyWidth, centerOfGravity, pressureCenter, aerodynamicCenter, stabilityCenterOfPressure, staticMargins, finHeight, finThickness, finMaterial, weight]);\n\n  // 現在の飛行フェーズを取得する関数\n  const getCurrentFlightPhase = useCallback(() => {\n    if (!isLaunched || !flightData || flightData.length === 0) {\n      return \"未発射\";\n    }\n\n    // プロパティの安全性を考慮して独自に計算\n    const timeIndex = Math.min(Math.floor(currentTime / 0.02), flightData.length - 1);\n    if (timeIndex < 0 || timeIndex >= flightData.length) {\n      return \"未発射\";\n    }\n    const currentData = flightData[timeIndex];\n    if (!currentData) {\n      return \"未発射\";\n    }\n    const position = {\n      isParachuteActive: currentData.isParachuteActive,\n      isParachuteEjected: currentData.isParachuteEjected\n    };\n    if (position.isParachuteActive) {\n      return \"パラシュート降下\";\n    } else if (position.isParachuteEjected) {\n      return \"パラシュート展開中\";\n    }\n\n    // 発射台からの距離を計算\n    const distanceFromStart = Math.sqrt(currentData.physicsX * currentData.physicsX + currentData.physicsY * currentData.physicsY);\n    const onLaunchRail = distanceFromStart < PHYSICAL_CONSTANTS.launchRailLength;\n    if (onLaunchRail) {\n      return \"発射台上\";\n    }\n\n    // エンジン推力が残っているか確認\n    const thrustEndTime = MOTOR_THRUST_DATA[selectedMotor].length * 0.02;\n    if (currentTime <= thrustEndTime) {\n      return \"推力飛行\";\n    }\n    return \"慣性飛行\";\n  }, [isLaunched, flightData, currentTime, selectedMotor]);\n\n  // 現在の位置情報を取得\n  const getCurrentPosition = useCallback(() => {\n    if (!isLaunched || !flightData || flightData.length === 0) {\n      // 初期状態・未発射状態\n      return {\n        physicsX: 0,\n        physicsY: 0,\n        rotation: launchAngle,\n        isParachuteEjected: false,\n        isParachuteActive: false,\n        parachuteDeploymentProgress: 0,\n        horizontalDistance: 0,\n        finDeflection: 0\n      };\n    }\n    const timeIndex = Math.min(Math.floor(currentTime / 0.02), flightData.length - 1);\n    if (timeIndex < 0 || timeIndex >= flightData.length) {\n      return {\n        physicsX: 0,\n        physicsY: 0,\n        rotation: launchAngle,\n        isParachuteEjected: false,\n        isParachuteActive: false,\n        parachuteDeploymentProgress: 0,\n        horizontalDistance: 0,\n        finDeflection: 0\n      };\n    }\n    const currentData = flightData[timeIndex];\n    if (!currentData) {\n      return {\n        physicsX: 0,\n        physicsY: 0,\n        rotation: launchAngle,\n        isParachuteEjected: false,\n        isParachuteActive: false,\n        parachuteDeploymentProgress: 0,\n        horizontalDistance: 0,\n        finDeflection: 0\n      };\n    }\n\n    // すべての数値にNaNチェックを追加\n    return {\n      physicsX: isNaN(currentData.physicsX) ? 0 : currentData.physicsX,\n      physicsY: isNaN(currentData.physicsY) ? 0 : currentData.physicsY,\n      rotation: isNaN(currentData.omega) ? launchAngle : currentData.omega * 180 / Math.PI,\n      isParachuteEjected: currentData.isParachuteEjected || false,\n      isParachuteActive: currentData.isParachuteActive || false,\n      parachuteDeploymentProgress: isNaN(currentData.parachuteDeploymentProgress) ? 0 : currentData.parachuteDeploymentProgress || 0,\n      torque: isNaN(currentData.torque) ? 0 : currentData.torque || 0,\n      angleChangePerDt2: isNaN(currentData.angleChangePerDt2) ? 0 : currentData.angleChangePerDt2 || 0,\n      horizontalDistance: isNaN(currentData.horizontalDistance) ? 0 : currentData.horizontalDistance || Math.abs(isNaN(currentData.physicsX) ? 0 : currentData.physicsX) || 0,\n      finDeflection: isNaN(currentData.finDeflection) ? 0 : currentData.finDeflection || 0,\n      effectiveWindSpeed: isNaN(currentData.effectiveWindSpeed) ? 0 : currentData.effectiveWindSpeed || 0\n    };\n  }, [isLaunched, flightData, currentTime, launchAngle]);\n\n  // モーターに応じた初期スケール値を取得する関数\n  const getInitialScaleForMotor = motorType => {\n    const baseScales = {\n      '1/2A6-2': 16,\n      // 強化された値\n      'A8-3': 12,\n      // 強化された値\n      'B6-4': 8 // 強化された値\n    };\n    return baseScales[motorType] || 12; // デフォルト値も強化\n  };\n\n  // モーターのパワー係数を取得する関数\n  const getMotorPowerFactor = motorType => {\n    const powerFactors = {\n      '1/2A6-2': 0.6,\n      // 調整された値\n      'A8-3': 0.5,\n      // 調整された値\n      'B6-4': 0.4 // 調整された値\n    };\n    return powerFactors[motorType] || 0.5; // デフォルト値も調整\n  };\n\n  // リセット関数を強化\n  const handleReset = useCallback(() => {\n    console.log('リセット処理開始');\n\n    // アニメーションをキャンセル\n    if (animationId) {\n      cancelAnimationFrame(animationId);\n      setAnimationId(null);\n    }\n\n    // 現在の結果を前回の結果として保存\n    if (flightResults) {\n      setLastFlightResults(flightResults);\n      setFlightResults(null);\n    }\n\n    // ポップアップを閉じる\n    setShowResultsPopup(false);\n\n    // すべての状態をリセット\n    setIsLaunched(false);\n    setFlightData([]);\n    setCurrentTime(0);\n    setCurrentHeight(0);\n    setCurrentSpeed(0);\n    setCurrentDistance(0);\n    setCurrentFinDeflection(0);\n    setCurrentMaxHeight(0);\n    setCurrentMaxSpeed(0);\n    setCurrentMaxDistance(0);\n    setCurrentMaxFinDeflection(0);\n\n    // 過去の飛行軌跡をクリア\n    setCompletedFlights([]);\n\n    // モーターに応じた適切なスケールを設定\n    const stableScale = getInitialScaleForMotor(selectedMotor);\n    setTrajectoryScale(stableScale);\n\n    // ロケットスケールも設定\n    const rocketScaleFactor = 0.03 * getMotorPowerFactor(selectedMotor);\n    setRocketScale(rocketScaleFactor);\n    console.log('シミュレーションが完全にリセットされました。新しいスケール: ', stableScale);\n  }, [animationId, flightResults, selectedMotor]);\n\n  // ポップアップを閉じる関数\n  const handleCloseResultsPopup = useCallback(() => {\n    setShowResultsPopup(false);\n    // 現在の結果を前回の結果として保存\n    if (flightResults) {\n      setLastFlightResults(flightResults);\n    }\n  }, [flightResults]);\n  const handleLaunch = useCallback(() => {\n    if (isLaunched) return;\n    try {\n      var _flight$data;\n      // 風速プロファイルを引数として渡す\n      const flight = calculateFlightPath(simulationParams, launchAngle, windSpeed, windProfile,\n      // 風速プロファイルを追加\n      SVG_CONFIG);\n      if (!(flight !== null && flight !== void 0 && (_flight$data = flight.data) !== null && _flight$data !== void 0 && _flight$data.length)) {\n        console.error('フライトデータが空です');\n        return;\n      }\n\n      // 初期データを取得（最初のフレーム用）\n      const initialData = flight.data[0];\n      console.log('初期フライトデータ：', initialData);\n      console.log(`最高到達高度: ${flight.maxHeight.toFixed(2)}m, 最高速度: ${flight.maxSpeed.toFixed(2)}m/s, 最大水平距離: ${flight.maxDistance.toFixed(2)}m`);\n      console.log(`最大フィンたわみ量: ${flight.maxFinDeflection.toFixed(4)}mm`);\n      console.log(`姿勢安定性: 最大角度変化量=${flight.angleStability.maxAngleChangePerDt2.toFixed(2)}°`);\n\n      // キーポイントを保存\n      setKeyPoints(flight.keyPoints);\n      setFlightData(flight.data);\n      setIsLaunched(true);\n      setCurrentTime(0);\n\n      // 初期値を明示的に設定\n      setCurrentHeight(initialData.height || 0);\n      setCurrentSpeed(initialData.vy || 0);\n      setCurrentDistance(initialData.horizontalDistance || 0);\n      setCurrentFinDeflection(initialData.finDeflection || 0);\n      setCurrentMaxHeight(initialData.height || 0);\n      setCurrentMaxSpeed(Math.abs(initialData.speedMagnitude) || 0);\n      setCurrentMaxDistance(0); // 最大水平距離の初期値\n      setCurrentMaxFinDeflection(0); // 最大フィンたわみ量の初期値\n\n      // アニメーション開始時間を記録\n      const startTime = performance.now();\n      let firstFrame = true;\n      const animate = timestamp => {\n        // 初回フレームの特別処理\n        if (firstFrame) {\n          firstFrame = false;\n          requestAnimationFrame(animate);\n          return;\n        }\n        try {\n          // アニメーション開始からの累積時間を計算（ANIMATION_SPEEDで調整）\n          const elapsed = Math.max(0, (timestamp - startTime) / 1000 * ANIMATION_SPEED);\n\n          // シミュレーションデータのインデックスを計算 - Math.maxを追加して負のインデックスを防止\n          const timeIndex = Math.max(0, Math.min(Math.floor(elapsed / 0.02), flight.data.length - 1));\n\n          // 追加のデバッグログ - 100フレームごとに状態を記録\n          if (timeIndex % 100 === 0) {\n            console.log(`Animation frame: time=${elapsed.toFixed(2)}s, index=${timeIndex}, total=${flight.data.length}`);\n          }\n\n          // データの安全性チェック\n          if (timeIndex >= 0 && timeIndex < flight.data.length) {\n            const currentData = flight.data[timeIndex];\n            if (currentData && typeof currentData === 'object') {\n              // NaNチェックを追加\n              setCurrentTime(elapsed);\n              setCurrentHeight(isNaN(currentData.height) ? 0 : currentData.height || 0);\n              setCurrentSpeed(isNaN(currentData.vy) ? 0 : currentData.vy || 0);\n              setCurrentDistance(isNaN(currentData.horizontalDistance) ? 0 : currentData.horizontalDistance || Math.abs(isNaN(currentData.physicsX) ? 0 : currentData.physicsX) || 0);\n\n              // フィンたわみ量のNaNチェック\n              const finDeflection = isNaN(currentData.finDeflection) ? 0 : currentData.finDeflection || 0;\n              setCurrentFinDeflection(finDeflection);\n\n              // 最大値の安全な更新\n              setCurrentMaxHeight(prev => Math.max(prev, isNaN(currentData.height) ? 0 : currentData.height || 0));\n              setCurrentMaxSpeed(prev => Math.max(prev, isNaN(currentData.speedMagnitude) ? 0 : Math.abs(currentData.speedMagnitude) || 0));\n              setCurrentMaxDistance(prev => Math.max(prev, isNaN(currentData.physicsX) ? 0 : Math.abs(currentData.physicsX) || 0));\n\n              // 最大フィンたわみ量の更新\n              setCurrentMaxFinDeflection(prev => Math.max(prev, finDeflection));\n\n              // アニメーションをデータの最後まで続けるようにする\n              if (timeIndex < flight.data.length - 1) {\n                const id = requestAnimationFrame(animate);\n                setAnimationId(id);\n              } else {\n                // アニメーション終了 - 最終フレームに到達した時だけ結果を表示\n                console.log('アニメーション完了: 最終インデックス到達');\n\n                // シミュレーションデータから最大値を直接計算（状態変数に依存せず確実に取得）\n                const maxHeight = Math.max(...flight.data.map(d => isNaN(d.height) ? 0 : d.height || 0));\n                const maxSpeed = Math.max(...flight.data.map(d => isNaN(d.speedMagnitude) ? 0 : Math.abs(d.speedMagnitude) || 0));\n                const maxDistance = Math.max(...flight.data.map(d => isNaN(d.physicsX) ? 0 : Math.abs(d.physicsX) || 0));\n                const maxFinDeflection = Math.max(...flight.data.map(d => isNaN(d.finDeflection) ? 0 : d.finDeflection || 0));\n\n                // 飛行結果の評価（直接計算した最大値を使用）\n                const isDivergenceOK = maxSpeed < flight.calculations.finDivergenceSpeed;\n                const isFlutterOK = maxSpeed < flight.calculations.finFlutterSpeed;\n                const maxDeflectionPercent = maxFinDeflection / finHeight * 100;\n                const isDeflectionOK = maxDeflectionPercent <= 3;\n\n                // 姿勢安定性の判定結果 - 最大角度偏差を使用しない\n                const isAngleStableOK = flight.angleStability.isAngleStableOK;\n                const maxAngleChangePerDt2 = flight.angleStability.maxAngleChangePerDt2;\n\n                // 総合判定は全てのチェックをパスする必要がある\n                const isOverallOK = isDivergenceOK && isFlutterOK && isDeflectionOK && isAngleStableOK;\n\n                // 結果オブジェクトの作成\n                const results = {\n                  maxSpeed: maxSpeed,\n                  maxHeight: maxHeight,\n                  maxDistance: maxDistance,\n                  maxFinDeflection: maxFinDeflection,\n                  finHeight: finHeight,\n                  maxDeflectionPercent: maxDeflectionPercent,\n                  divergenceSpeed: formatSpeedValue(flight.calculations.finDivergenceSpeed),\n                  flutterSpeed: formatSpeedValue(flight.calculations.finFlutterSpeed),\n                  isDivergenceOK,\n                  isFlutterOK,\n                  isDeflectionOK,\n                  isAngleStableOK,\n                  maxAngleChangePerDt2,\n                  isOverallOK,\n                  launchAngle,\n                  windSpeed,\n                  windProfile\n                };\n\n                // 状態更新を一度に行う\n                setFlightResults(results);\n                setShowResultsPopup(true);\n\n                // UI上の最大値表示も更新\n                setCurrentMaxHeight(maxHeight);\n                setCurrentMaxSpeed(maxSpeed);\n                setCurrentMaxDistance(maxDistance);\n                setCurrentMaxFinDeflection(maxFinDeflection);\n                const completedFlightData = {\n                  data: [...flight.data],\n                  launchAngle,\n                  windSpeed,\n                  windProfile,\n                  maxHeight: maxHeight,\n                  maxSpeed: maxSpeed,\n                  maxDistance: maxDistance,\n                  maxFinDeflection: maxFinDeflection,\n                  scale: trajectoryScale,\n                  results: results // 結果も保存\n                };\n                setCompletedFlights(prevFlights => [...prevFlights, completedFlightData]);\n                setIsLaunched(false);\n              }\n            }\n          }\n        } catch (error) {\n          // エラーが発生した場合は記録して次のフレームを試行\n          console.error('Animation frame error:', error);\n\n          // 重大なエラーでなければ次のフレームを継続\n          if (timeIndex < flight.data.length - 1) {\n            const id = requestAnimationFrame(animate);\n            setAnimationId(id);\n          } else {\n            // エラー発生時も最終フレームに達していれば終了処理\n            handleReset();\n          }\n        }\n      };\n\n      // アニメーション開始\n      requestAnimationFrame(animate);\n    } catch (error) {\n      console.error('Launch error:', error);\n      handleReset();\n    }\n  }, [isLaunched, launchAngle, windSpeed, windProfile, simulationParams, handleReset, finHeight, trajectoryScale]);\n\n  // パラメータ変更時のスケール更新\n  useEffect(() => {\n    if (isLaunched) return;\n\n    // 風速プロファイルを引数として渡す\n    const flight = calculateFlightPath(simulationParams, launchAngle, windSpeed, windProfile,\n    // 風速プロファイルを追加\n    SVG_CONFIG);\n    if (flight && flight.maxHeight > 0) {\n      const availableHeight = SVG_CONFIG.height - SVG_CONFIG.groundLevel;\n\n      // 改良：より高いベース高さを設定\n      const baseHeights = {\n        '1/2A6-2': 100,\n        'A8-3': 150,\n        'B6-4': 200\n      };\n      const expectedBaseHeight = baseHeights[simulationParams.selectedMotor] || 150;\n      const targetHeight = Math.max(flight.maxHeight * 1.3, expectedBaseHeight);\n      const minHorizontalDistance = expectedBaseHeight * 0.9;\n      const maxDistance = Math.max(flight.maxDistance || 0, minHorizontalDistance);\n\n      // スケール計算\n      const verticalScale = availableHeight / targetHeight;\n      const horizontalScale = SVG_CONFIG.width * 0.9 / (maxDistance * 2 || 1);\n      const motorPowerFactor = {\n        '1/2A6-2': 0.45,\n        'A8-3': 0.35,\n        'B6-4': 0.25\n      };\n      const powerFactor = motorPowerFactor[simulationParams.selectedMotor] || 0.35;\n\n      // 最小/最大スケール値の調整\n      const minScale = 10;\n      const maxScale = 24;\n      const rawScale = Math.min(verticalScale, horizontalScale) * powerFactor;\n      // 最終スケールを調整 - 必ず最小スケールを適用\n      const finalScale = Math.max(minScale, Math.min(maxScale, rawScale));\n\n      // スケール設定\n      setTrajectoryScale(finalScale);\n\n      // ロケットスケールをさらに小さく\n      const baseRocketScale = 0.03;\n      setRocketScale(baseRocketScale * powerFactor);\n      console.log(`パラメータ更新: モーター=${simulationParams.selectedMotor}, 高度=${flight.maxHeight.toFixed(1)}m, スケール=${finalScale.toFixed(2)}`);\n    }\n  }, [isLaunched, launchAngle, windSpeed, windProfile, simulationParams]);\n\n  // 初期表示時の強制スケール設定用のuseEffect追加\n  useEffect(() => {\n    // コンポーネント初期マウント時に強制的にスケールを設定\n    const initialScale = getInitialScaleForMotor(selectedMotor);\n    const initialRocketScale = 0.03 * getMotorPowerFactor(selectedMotor);\n    setTrajectoryScale(initialScale);\n    setRocketScale(initialRocketScale);\n    console.log(`初期表示: スケール=${initialScale}, ロケットスケール=${initialRocketScale}`);\n  }, []); // 空の依存配列で初回のみ実行\n\n  // クリーンアップ\n  useEffect(() => {\n    return () => {\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n      if (sliderTimeoutRef.current) {\n        clearTimeout(sliderTimeoutRef.current);\n      }\n    };\n  }, [animationId]);\n\n  // 本フックから公開する関数とパラメータ\n  return {\n    // デザインパラメータ\n    noseShape,\n    setNoseShape: setNoseShapeAndUpdate,\n    noseHeight,\n    setNoseHeight: debounce(setNoseHeight, SLIDER_DEBOUNCE_TIME),\n    bodyHeight,\n    setBodyHeight: debounce(setBodyHeight, SLIDER_DEBOUNCE_TIME),\n    bodyWidth,\n    setBodyWidth: debounce(setBodyWidth, SLIDER_DEBOUNCE_TIME),\n    finHeight,\n    setFinHeight: debounce(setFinHeight, SLIDER_DEBOUNCE_TIME),\n    finBaseWidth,\n    setFinBaseWidth: debounce(setFinBaseWidth, SLIDER_DEBOUNCE_TIME),\n    finTipWidth,\n    setFinTipWidth: debounce(setFinTipWidth, SLIDER_DEBOUNCE_TIME),\n    finThickness,\n    setFinThickness: debounce(setFinThickness, SLIDER_DEBOUNCE_TIME),\n    finSweepLength,\n    setFinSweepLength: debounce(setFinSweepLength, SLIDER_DEBOUNCE_TIME),\n    finMaterial,\n    setFinMaterial,\n    finCount,\n    setFinCount,\n    // 分析パラメータ\n    weight,\n    setWeight: debounce(setWeight, SLIDER_DEBOUNCE_TIME),\n    centerOfGravity,\n    setCenterOfGravity: debounce(setCenterOfGravity, SLIDER_DEBOUNCE_TIME),\n    selectedMotor,\n    setSelectedMotor,\n    selectedParachute,\n    setSelectedParachute,\n    // シミュレーションパラメータ\n    launchAngle,\n    setLaunchAngle: debounce(setLaunchAngle, SLIDER_DEBOUNCE_TIME),\n    windSpeed,\n    setWindSpeed: debounce(setWindSpeed, SLIDER_DEBOUNCE_TIME),\n    windProfile,\n    setWindProfile,\n    showWindArrows,\n    setShowWindArrows,\n    // シミュレーション状態\n    isLaunched,\n    setIsLaunched,\n    flightData,\n    currentTime,\n    currentHeight,\n    currentSpeed,\n    currentDistance,\n    currentFinDeflection,\n    currentMaxHeight,\n    currentMaxSpeed,\n    currentMaxDistance,\n    currentMaxFinDeflection,\n    completedFlights,\n    keyPoints,\n    // 表示設定\n    design,\n    analysis,\n    trajectoryScale,\n    rocketScale,\n    // 新しい計算結果\n    projectedAreas,\n    volumes,\n    pressureCenter,\n    aerodynamicCenter,\n    stabilityCenterOfPressure,\n    staticMargins,\n    // 計算結果\n    calculations,\n    // 初期化状態\n    isInitialized,\n    // スライダーのデータと更新関数\n    noseHeightInputRef,\n    handleNoseHeight: handleSliderChange(noseHeightInputRef, setNoseHeight),\n    bodyHeightInputRef,\n    handleBodyHeight: handleSliderChange(bodyHeightInputRef, setBodyHeight),\n    bodyWidthInputRef,\n    handleBodyWidth: handleSliderChange(bodyWidthInputRef, setBodyWidth),\n    finHeightInputRef,\n    handleFinHeight: handleSliderChange(finHeightInputRef, setFinHeight),\n    finBaseWidthInputRef,\n    handleFinBaseWidth: handleSliderChange(finBaseWidthInputRef, setFinBaseWidth),\n    finTipWidthInputRef,\n    handleFinTipWidth: handleSliderChange(finTipWidthInputRef, setFinTipWidth),\n    finThicknessInputRef,\n    handleFinThickness: handleSliderChange(finThicknessInputRef, setFinThickness),\n    finSweepLengthInputRef,\n    handleFinSweepLength: handleSliderChange(finSweepLengthInputRef, setFinSweepLength),\n    weightInputRef,\n    handleWeight: handleSliderChange(weightInputRef, setWeight),\n    centerOfGravityInputRef,\n    handleCenterOfGravity: handleSliderChange(centerOfGravityInputRef, setCenterOfGravity),\n    launchAngleInputRef,\n    handleLaunchAngle: handleSliderChange(launchAngleInputRef, setLaunchAngle),\n    windSpeedInputRef,\n    handleWindSpeed: handleSliderChange(windSpeedInputRef, setWindSpeed),\n    // 描画関数 - 外部のレンダリング関数を呼び出すためのラッパー\n    getNosePath: config => getNosePath(config, noseShape, noseHeight, bodyWidth, bodyHeight),\n    getBodyPath: config => getBodyPath(config, bodyHeight, bodyWidth),\n    getLeftFinPath: config => getLeftFinPath(config, bodyWidth, finHeight, finBaseWidth, finSweepLength, finTipWidth),\n    getRightFinPath: config => getRightFinPath(config, bodyWidth, finHeight, finBaseWidth, finSweepLength, finTipWidth),\n    getCenterFinsPath: config => getCenterFinsPath(config, finThickness, finBaseWidth, finSweepLength, finTipWidth),\n    getParachutePath: getParachute,\n    getParachuteStringPaths: getParachuteStrings,\n    getWindArrow,\n    getWindProfileArrows: getWindArrows,\n    // 座標変換\n    metersToSvgX: convertMetersToSvgX,\n    metersToSvgY: convertMetersToSvgY,\n    // viewBox計算\n    getDesignViewBox: computeDesignViewBox,\n    getAnalysisViewBox: computeAnalysisViewBox,\n    // ユーティリティ関数\n    getActualRocketDimensions: getRocketDimensions,\n    getCurrentPosition,\n    calculateWindSpeedAtHeight,\n    formatFinDeflection,\n    getSafeValue,\n    // 操作関数\n    handleLaunch,\n    handleReset,\n    // 結果表示関連\n    showResultsPopup,\n    flightResults,\n    lastFlightResults,\n    getCurrentFlightPhase,\n    handleCloseResultsPopup\n  };\n};\n\n// 統合されたロケットシミュレーターコンポーネント\n_s(useRocketSimulator, \"/04nO+rwme8pmT7hpkmidlP3rcQ=\");\nconst IntegratedRocketSimulator = () => {\n  _s2();\n  const [activeTab, setActiveTab] = useState(UI_CONFIG.defaultTab);\n  const [debugView, setDebugView] = useState(false);\n\n  // ロケットシミュレーターフックを使用\n  const rocketSim = useRocketSimulator();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-6xl mx-auto p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"AVIENTER_2D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1015,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex border-b mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `px-6 py-3 font-medium ${activeTab === 'design' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'} rounded-t-lg`,\n        onClick: () => setActiveTab('design'),\n        children: \"\\u5F62\\u72B6\\u8A2D\\u8A08\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1018,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `px-6 py-3 font-medium ${activeTab === 'analysis' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'} rounded-t-lg ml-1`,\n        onClick: () => setActiveTab('analysis'),\n        children: \"\\u91CD\\u91CF\\u30FB\\u7A7A\\u529B\\u7279\\u6027\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1024,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `px-6 py-3 font-medium ${activeTab === 'simulation' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'} rounded-t-lg ml-1`,\n        onClick: () => setActiveTab('simulation'),\n        children: \"\\u98DB\\u884C\\u30B7\\u30DF\\u30E5\\u30EC\\u30FC\\u30B7\\u30E7\\u30F3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1030,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1017,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [activeTab === 'design' && /*#__PURE__*/_jsxDEV(DesignTab, {\n        rocketSim: rocketSim\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1039,\n        columnNumber: 36\n      }, this), activeTab === 'analysis' && /*#__PURE__*/_jsxDEV(AnalysisTab, {\n        rocketSim: rocketSim,\n        getSafeValue: getSafeValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1040,\n        columnNumber: 38\n      }, this), activeTab === 'simulation' && /*#__PURE__*/_jsxDEV(SimulationTab, {\n        rocketSim: rocketSim,\n        debugView: debugView,\n        setDebugView: setDebugView\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1041,\n        columnNumber: 40\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1038,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-8 pt-4 border-t border-gray-300 text-sm text-gray-600\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mb-1\",\n        children: \"\\xA9 2025 AVIATOL - \\u3054\\u5229\\u7528\\u306F\\u500B\\u4EBA\\u3067\\u306E\\u7BC4\\u56F2\\u306B\\u9650\\u308A\\u307E\\u3059\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1046,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mb-1\",\n        children: \"\\u8A31\\u53EF\\u304C\\u306A\\u3044\\u5834\\u5408\\u3001\\u5546\\u7528\\u3067\\u306E\\u3054\\u5229\\u7528\\u306F\\u3054\\u9060\\u616E\\u304F\\u3060\\u3055\\u3044\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1047,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mb-1\",\n        children: \"\\u7D39\\u4ECB\\u76EE\\u7684\\u3067\\u306E\\u3054\\u5229\\u7528\\u306F\\u3053\\u306E\\u9650\\u308A\\u3067\\u306F\\u3042\\u308A\\u307E\\u305B\\u3093\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1048,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mb-1\",\n        children: \"\\u3054\\u7D39\\u4ECB\\u3044\\u305F\\u3060\\u3051\\u308B\\u5834\\u5408\\u306F\\u3001info(a)aviatol.com\\u307E\\u3067\\u3054\\u9023\\u7D61\\u3092\\u304A\\u9858\\u3044\\u3057\\u307E\\u3059\\uFF08(a)\\u306F@\\u306B\\u5909\\u3048\\u3066\\u304F\\u3060\\u3055\\u3044\\uFF09\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1049,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mb-1\",\n        children: \"\\u672C\\u30B7\\u30DF\\u30E5\\u30EC\\u30FC\\u30B7\\u30E7\\u30F3\\u306F\\u5B9F\\u6A5F\\u3067\\u306E\\u52D5\\u4F5C\\u3092\\u4FDD\\u8A3C\\u3059\\u308B\\u3082\\u306E\\u3067\\u306F\\u3042\\u308A\\u307E\\u305B\\u3093\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1050,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u30ED\\u30B1\\u30C3\\u30C8\\u306E\\u6253\\u4E0A\\u3052\\u306F\\u81EA\\u8EAB\\u3068\\u5468\\u308A\\u306E\\u5B89\\u5168\\u306B\\u5341\\u5206\\u914D\\u616E\\u3057\\u3001\\u500B\\u4EBA\\u306E\\u8CAC\\u4EFB\\u306E\\u7BC4\\u56F2\\u3067\\u884C\\u306A\\u3063\\u3066\\u304F\\u3060\\u3055\\u3044\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1051,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1045,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1014,\n    columnNumber: 5\n  }, this);\n};\n_s2(IntegratedRocketSimulator, \"Ye6MAzXYH1YYenzViCoRCSAEUk8=\", false, function () {\n  return [useRocketSimulator];\n});\n_c = IntegratedRocketSimulator;\nexport default IntegratedRocketSimulator;\nvar _c;\n$RefreshReg$(_c, \"IntegratedRocketSimulator\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","useMemo","useRef","SVG_CONFIG","MOTOR_THRUST_DATA","PARACHUTE_SIZES","FIN_MATERIALS","NOSE_SHAPES","WIND_PROFILES","PHYSICAL_CONSTANTS","ANGLE_RESPONSE_DT","ANGLE_STEPS_PER_UPDATE","ANIMATION_SPEED","SLIDER_DEBOUNCE_TIME","mmToM","gToKg","UI_CONFIG","ANALYSIS_VIEW_CONFIG","calculateProjectedArea","calculateVolume","calculateCenterOfPressure","calculateAerodynamicCenter","calculateStabilityCenterOfPressure","calculateStaticMargin","calculateFinDivergenceSpeed","calculateFinFlutterSpeed","formatFinDeflection","formatSpeedValue","calculateWindSpeedAtHeight","calculateFlightPath","getNosePath","getBodyPath","getLeftFinPath","getRightFinPath","getCenterFinsPath","getParachutePath","getParachuteStringPaths","getWindArrow","getWindProfileArrows","metersToSvgX","metersToSvgY","getActualRocketDimensions","getSafeRotationTransform","getAnalysisViewBox","getDesignViewBox","getRocketTransform","getSafeValue","WindAngleLimitVisualizer","ResultsPopup","LastFlightResults","ParameterSlider","DesignTab","AnalysisTab","jsxDEV","_jsxDEV","useRocketSimulator","_s","initialRocketState","noseShape","noseHeight","bodyHeight","bodyWidth","finHeight","finBaseWidth","finTipWidth","finThickness","finSweepLength","finMaterial","weight","centerOfGravity","setNoseShape","setNoseHeight","setBodyHeight","setBodyWidth","setFinHeight","setFinBaseWidth","setFinTipWidth","setFinThickness","setFinSweepLength","setFinMaterial","finCount","setFinCount","setWeight","setCenterOfGravity","selectedMotor","setSelectedMotor","selectedParachute","setSelectedParachute","launchAngle","setLaunchAngle","windSpeed","setWindSpeed","windProfile","setWindProfile","showWindArrows","setShowWindArrows","isInitialized","setIsInitialized","isLaunched","setIsLaunched","flightData","setFlightData","currentTime","setCurrentTime","animationId","setAnimationId","trajectoryScale","setTrajectoryScale","rocketScale","setRocketScale","currentHeight","setCurrentHeight","currentSpeed","setCurrentSpeed","currentDistance","setCurrentDistance","currentFinDeflection","setCurrentFinDeflection","currentMaxHeight","setCurrentMaxHeight","currentMaxSpeed","setCurrentMaxSpeed","currentMaxDistance","setCurrentMaxDistance","currentMaxFinDeflection","setCurrentMaxFinDeflection","completedFlights","setCompletedFlights","keyPoints","setKeyPoints","showResultsPopup","setShowResultsPopup","flightResults","setFlightResults","lastFlightResults","setLastFlightResults","projectedAreas","setProjectedAreas","volumes","setVolumes","pressureCenter","setPressureCenter","aerodynamicCenter","setAerodynamicCenter","stabilityCenterOfPressure","setStabilityCenterOfPressure","staticMargins","setStaticMargins","simulationParams","setNoseShapeAndUpdate","shape","sliderTimeoutRef","noseHeightInputRef","bodyHeightInputRef","bodyWidthInputRef","finHeightInputRef","finBaseWidthInputRef","finTipWidthInputRef","finThicknessInputRef","finSweepLengthInputRef","weightInputRef","centerOfGravityInputRef","launchAngleInputRef","windSpeedInputRef","debounce","func","args","handleSliderChange","ref","setter","updateValueFromEvent","event","current","rect","getBoundingClientRect","width","left","relativeX","clientX","Math","max","min","Number","step","newValue","round","onChange","e","target","value","onClick","onMouseDown","startEvent","handleMouseMove","moveEvent","preventDefault","handleMouseUp","document","removeEventListener","addEventListener","onTouchStart","touches","handleTouchMove","touch","mockEvent","clientY","handleTouchEnd","passive","design","designViewWidth","height","designViewHeight","centerX","analysis","analysisViewWidth","analysisViewHeight","convertMetersToSvgX","meters","convertMetersToSvgY","getRocketDimensions","config","getWindArrows","baseWindSpeed","profile","getParachute","x","y","isOpen","deploymentProgress","rotation","rocketLength","getParachuteStrings","computeDesignViewBox","computeAnalysisViewBox","areas","volumeData","cpData","acData","stabilityCpData","margins","calculations","actualRocketHeight","finExtension","totalHeight","cp","centerOfPressure","ac","stabilityCp","standardMargin","standardStaticMargin","stabilityMargin","stabilityStaticMargin","rocketParams","finDivergenceSpeed","finFlutterSpeed","toFixed","finDivergenceSpeedDisplay","finFlutterSpeedDisplay","getCurrentFlightPhase","length","timeIndex","floor","currentData","position","isParachuteActive","isParachuteEjected","distanceFromStart","sqrt","physicsX","physicsY","onLaunchRail","launchRailLength","thrustEndTime","getCurrentPosition","parachuteDeploymentProgress","horizontalDistance","finDeflection","isNaN","omega","PI","torque","angleChangePerDt2","abs","effectiveWindSpeed","getInitialScaleForMotor","motorType","baseScales","getMotorPowerFactor","powerFactors","handleReset","console","log","cancelAnimationFrame","stableScale","rocketScaleFactor","handleCloseResultsPopup","handleLaunch","_flight$data","flight","data","error","initialData","maxHeight","maxSpeed","maxDistance","maxFinDeflection","angleStability","maxAngleChangePerDt2","vy","speedMagnitude","startTime","performance","now","firstFrame","animate","timestamp","requestAnimationFrame","elapsed","prev","id","map","d","isDivergenceOK","isFlutterOK","maxDeflectionPercent","isDeflectionOK","isAngleStableOK","isOverallOK","results","divergenceSpeed","flutterSpeed","completedFlightData","scale","prevFlights","availableHeight","groundLevel","baseHeights","expectedBaseHeight","targetHeight","minHorizontalDistance","verticalScale","horizontalScale","motorPowerFactor","powerFactor","minScale","maxScale","rawScale","finalScale","baseRocketScale","initialScale","initialRocketScale","clearTimeout","handleNoseHeight","handleBodyHeight","handleBodyWidth","handleFinHeight","handleFinBaseWidth","handleFinTipWidth","handleFinThickness","handleFinSweepLength","handleWeight","handleCenterOfGravity","handleLaunchAngle","handleWindSpeed","IntegratedRocketSimulator","_s2","activeTab","setActiveTab","defaultTab","debugView","setDebugView","rocketSim","className","children","fileName","_jsxFileName","lineNumber","columnNumber","SimulationTab","_c","$RefreshReg$"],"sources":["/Users/shinoharatsubasa/Documents/RocketSim_New_2d_integ/src/components/rocket/RocketSimulator.jsx"],"sourcesContent":["// メインのシミュレーターコンポーネント\nimport React, { useState, useCallback, useEffect, useMemo, useRef } from 'react';\n\n// 定数とデータ定義のインポート\nimport { \n  SVG_CONFIG, MOTOR_THRUST_DATA, PARACHUTE_SIZES, FIN_MATERIALS, \n  NOSE_SHAPES, WIND_PROFILES, PHYSICAL_CONSTANTS, ANGLE_RESPONSE_DT,\n  ANGLE_STEPS_PER_UPDATE, ANIMATION_SPEED, SLIDER_DEBOUNCE_TIME,\n  mmToM, gToKg, UI_CONFIG, ANALYSIS_VIEW_CONFIG\n} from './RocketConstants';\n\n// 物理計算関連のインポート\nimport {\n  calculateProjectedArea, calculateVolume, calculateCenterOfPressure, \n  calculateAerodynamicCenter, calculateStabilityCenterOfPressure,\n  calculateStaticMargin, calculateFinDivergenceSpeed, calculateFinFlutterSpeed,\n  formatFinDeflection, formatSpeedValue, calculateWindSpeedAtHeight,\n  calculateFlightPath\n} from './RocketPhysics';\n\n// SVG描画関連のインポート\nimport {\n  getNosePath, getBodyPath, getLeftFinPath, getRightFinPath, getCenterFinsPath,\n  getParachutePath, getParachuteStringPaths, getWindArrow, getWindProfileArrows,\n  metersToSvgX, metersToSvgY, getActualRocketDimensions, getSafeRotationTransform,\n  getAnalysisViewBox, getDesignViewBox, getRocketTransform, getSafeValue,\n} from './RocketRendering';\n\n// UI関連のコンポーネントのインポート\nimport {\n  WindAngleLimitVisualizer, ResultsPopup, LastFlightResults,\n  ParameterSlider, DesignTab, AnalysisTab\n} from './RocketUIComponents';\n\n// ロケットデザインとシミュレーションを統合したカスタムフック\nconst useRocketSimulator = () => {\n  // 初期値を明示的に設定することで、undefinedやnullが発生しない\n  const initialRocketState = {\n    noseShape: \"ogive\",\n    noseHeight: 57,\n    bodyHeight: 255,\n    bodyWidth: 31,\n    finHeight: 58.5,\n    finBaseWidth: 65,\n    finTipWidth: 25, \n    finThickness: 1.5,\n    finSweepLength: 95,\n    finMaterial: \"light_veneer\",\n    weight: 50,\n    centerOfGravity: 150\n  };\n\n  // Design parameters\n  const [noseShape, setNoseShape] = useState(\"ogive\");\n  const [noseHeight, setNoseHeight] = useState(57);   // 57mmに変更\n  const [bodyHeight, setBodyHeight] = useState(255);   // 255mmに変更\n  const [bodyWidth, setBodyWidth] = useState(31);\n  const [finHeight, setFinHeight] = useState(58.5);      // 58.5mmに変更\n  const [finBaseWidth, setFinBaseWidth] = useState(65); // 65mmに変更\n  const [finTipWidth, setFinTipWidth] = useState(25);   // 25mmに変更\n  const [finThickness, setFinThickness] = useState(1.5); // 1.5mmに変更\n  const [finSweepLength, setFinSweepLength] = useState(95); // 95mmに変更\n  const [finMaterial, setFinMaterial] = useState(\"light_veneer\");\n  // フィン枚数状態を追加\n  const [finCount, setFinCount] = useState(4); // デフォルトは4枚\n\n  // Analysis parameters - weight変数の宣言を初期化前の参照より前に移動\n  const [weight, setWeight] = useState(50);\n  const [centerOfGravity, setCenterOfGravity] = useState(150);\n  const [selectedMotor, setSelectedMotor] = useState(\"A8-3\");\n  const [selectedParachute, setSelectedParachute] = useState(\"φ300\");\n  \n  // Simulation parameters\n  const [launchAngle, setLaunchAngle] = useState(0);\n  const [windSpeed, setWindSpeed] = useState(0);\n  const [windProfile, setWindProfile] = useState(\"uniform\");\n  const [showWindArrows, setShowWindArrows] = useState(true);\n  \n  // 2. rocketSimの初期状態が完全に構築されてから計算や描画を行うための状態\n  const [isInitialized, setIsInitialized] = useState(false);\n  \n  // 初期化完了を検出するuseEffect\n  useEffect(() => {\n    // すべての必要な値が初期化されたことを確認\n    if (\n      noseShape && \n      typeof noseHeight === 'number' && \n      typeof bodyHeight === 'number' && \n      typeof bodyWidth === 'number' &&\n      typeof finHeight === 'number' && \n      typeof finBaseWidth === 'number' && \n      typeof finTipWidth === 'number' &&\n      typeof finThickness === 'number' && \n      typeof finSweepLength === 'number' && \n      typeof weight === 'number' && \n      typeof centerOfGravity === 'number'\n    ) {\n      setIsInitialized(true);\n    }\n  }, [\n    noseShape, noseHeight, bodyHeight, bodyWidth, \n    finHeight, finBaseWidth, finTipWidth, finThickness, finSweepLength,\n    weight, centerOfGravity\n  ]);\n\n  // Simulation state\n  const [isLaunched, setIsLaunched] = useState(false);\n  const [flightData, setFlightData] = useState([]);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [animationId, setAnimationId] = useState(null);\n  const [trajectoryScale, setTrajectoryScale] = useState(1.0);\n  const [rocketScale, setRocketScale] = useState(0.1);\n  const [currentHeight, setCurrentHeight] = useState(0);\n  const [currentSpeed, setCurrentSpeed] = useState(0);\n  const [currentDistance, setCurrentDistance] = useState(0);\n  const [currentFinDeflection, setCurrentFinDeflection] = useState(0);\n  const [currentMaxHeight, setCurrentMaxHeight] = useState(0);\n  const [currentMaxSpeed, setCurrentMaxSpeed] = useState(0);\n  const [currentMaxDistance, setCurrentMaxDistance] = useState(0);\n  const [currentMaxFinDeflection, setCurrentMaxFinDeflection] = useState(0);\n  const [completedFlights, setCompletedFlights] = useState([]);\n  const [keyPoints, setKeyPoints] = useState({});\n\n  // 状態変数の追加\n  const [showResultsPopup, setShowResultsPopup] = useState(false);\n  const [flightResults, setFlightResults] = useState(null);\n  const [lastFlightResults, setLastFlightResults] = useState(null);\n  \n  // 新しく追加した状態変数\n  const [projectedAreas, setProjectedAreas] = useState(null);\n  const [volumes, setVolumes] = useState(null);\n  const [pressureCenter, setPressureCenter] = useState(null);\n  const [aerodynamicCenter, setAerodynamicCenter] = useState(null);\n  const [stabilityCenterOfPressure, setStabilityCenterOfPressure] = useState(null);\n  const [staticMargins, setStaticMargins] = useState(null);\n\n  // 物理計算のための全パラメータをまとめる\n  const simulationParams = useMemo(() => ({\n    noseShape,\n    noseHeight,\n    bodyHeight,\n    bodyWidth,\n    finHeight,\n    finBaseWidth,\n    finTipWidth,\n    finThickness,\n    finSweepLength,\n    finMaterial,\n    weight,\n    centerOfGravity,\n    selectedMotor,\n    selectedParachute\n  }), [\n    noseShape, noseHeight, bodyHeight, bodyWidth, \n    finHeight, finBaseWidth, finTipWidth, finThickness, finSweepLength,\n    finMaterial, weight, centerOfGravity, selectedMotor, selectedParachute\n  ]);\n\n  // useRocketSimulator内で、noseShapeの状態変更を正しく伝播するように修正\n  const setNoseShapeAndUpdate = (shape) => {\n    setNoseShape(shape);\n    // その他の更新は依存関係に基づいてuseEffectで自動的に行われる\n  };\n  \n  // スライダーの動きをスムーズにするためのdebounce用ref\n  const sliderTimeoutRef = useRef(null);\n\n  // スライダーのリファレンスを保持するための変数\n  const noseHeightInputRef = useRef(null);\n  const bodyHeightInputRef = useRef(null);\n  const bodyWidthInputRef = useRef(null);\n  const finHeightInputRef = useRef(null);\n  const finBaseWidthInputRef = useRef(null);\n  const finTipWidthInputRef = useRef(null);\n  const finThicknessInputRef = useRef(null);\n  const finSweepLengthInputRef = useRef(null);\n  const weightInputRef = useRef(null);\n  const centerOfGravityInputRef = useRef(null);\n  const launchAngleInputRef = useRef(null);\n  const windSpeedInputRef = useRef(null);\n  \n  // スムーズなスライダー操作のためのdebounce関数\n  const debounce = (func) => {\n    // デバウンスを実質的に無効化して直接値を更新\n    return (...args) => {\n      func(...args);\n    };\n  };\n\n  // スライダー値の更新処理をよりダイレクトにするハンドラーを追加\n  const handleSliderChange = useCallback((ref, setter) => {\n    // マウスイベントの処理関数\n    const updateValueFromEvent = (event) => {\n      if (!ref.current) return;\n      \n      const rect = ref.current.getBoundingClientRect();\n      const width = rect.width;\n      const left = rect.left;\n      \n      // マウス位置をスライダー内の相対位置(0～1)に変換\n      let relativeX = (event.clientX - left) / width;\n      // 範囲外の場合はクランプ(0～1に制限)\n      relativeX = Math.max(0, Math.min(1, relativeX));\n      \n      // スライダーの最小値と最大値\n      const min = Number(ref.current.min);\n      const max = Number(ref.current.max);\n      const step = Number(ref.current.step) || 1;\n      \n      // 相対位置から実際の値を計算\n      let newValue = min + relativeX * (max - min);\n      \n      // 設定されたstepに基づいて値を丸める\n      if (step !== 0) {\n        newValue = Math.round(newValue / step) * step;\n      }\n      \n      // 念のため、最終値を最小値と最大値の範囲内に収める\n      newValue = Math.max(min, Math.min(max, newValue));\n      \n      // 値を更新 - 常にNumberとして扱う\n      setter(Number(newValue));\n    };\n    \n    return {\n      // 値変更イベント(標準のonChange) - 明示的にNumberに変換\n      onChange: (e) => setter(Number(e.target.value)),\n      \n      // トラックのクリックイベント(スライダー上の任意の位置)\n      onClick: updateValueFromEvent,\n      \n      // スライダーのドラッグ開始\n      onMouseDown: (startEvent) => {\n        // ドキュメント全体でのマウス移動を監視\n        const handleMouseMove = (moveEvent) => {\n          moveEvent.preventDefault();\n          updateValueFromEvent(moveEvent);\n        };\n        \n        // マウスボタンを離したときの処理\n        const handleMouseUp = () => {\n          document.removeEventListener('mousemove', handleMouseMove);\n          document.removeEventListener('mouseup', handleMouseUp);\n        };\n        \n        // 最初のクリック位置で値を更新\n        updateValueFromEvent(startEvent);\n        \n        // ドキュメント全体にイベントリスナーを追加\n        document.addEventListener('mousemove', handleMouseMove);\n        document.addEventListener('mouseup', handleMouseUp);\n      },\n      \n      // タッチデバイス対応\n      onTouchStart: (startEvent) => {\n        if (!startEvent.touches[0]) return;\n        \n        const handleTouchMove = (moveEvent) => {\n          if (!moveEvent.touches[0]) return;\n          moveEvent.preventDefault();\n          \n          const touch = moveEvent.touches[0];\n          const mockEvent = { clientX: touch.clientX, clientY: touch.clientY };\n          updateValueFromEvent(mockEvent);\n        };\n        \n        const handleTouchEnd = () => {\n          document.removeEventListener('touchmove', handleTouchMove);\n          document.removeEventListener('touchend', handleTouchEnd);\n        };\n        \n        const touch = startEvent.touches[0];\n        const mockEvent = { clientX: touch.clientX, clientY: touch.clientY };\n        updateValueFromEvent(mockEvent);\n        \n        document.addEventListener('touchmove', handleTouchMove, { passive: false });\n        document.addEventListener('touchend', handleTouchEnd);\n      }\n    };\n  }, []);\n  \n  // Design display dimensions\n  const design = useMemo(() => ({\n    width: UI_CONFIG.designViewWidth,\n    height: UI_CONFIG.designViewHeight,\n    centerX: UI_CONFIG.designViewWidth / 2\n  }), []);\n\n  const analysis = useMemo(() => ({\n    width: UI_CONFIG.analysisViewWidth,\n    height: UI_CONFIG.analysisViewHeight,\n    centerX: UI_CONFIG.analysisViewWidth / 2\n  }), []);\n  \n  // メートル単位からSVG座標への変換関数の修正版\n  const convertMetersToSvgX = useCallback((meters) => {\n    return metersToSvgX(meters, trajectoryScale);\n  }, [trajectoryScale]);\n  \n  const convertMetersToSvgY = useCallback((meters) => {\n    return metersToSvgY(meters, trajectoryScale);\n  }, [trajectoryScale]);\n\n  // 実際のロケット寸法を計算するためのラッパー\n  const getRocketDimensions = useCallback((config) => {\n    return getActualRocketDimensions(\n      config, noseHeight, bodyHeight, \n      finSweepLength, finTipWidth, finBaseWidth\n    );\n  }, [noseHeight, bodyHeight, finSweepLength, finTipWidth, finBaseWidth]);\n  \n  // 視覚化のための風速高度分布矢印ラッパー\n  const getWindArrows = useCallback((baseWindSpeed, profile) => {\n    return getWindProfileArrows(\n      baseWindSpeed, profile, showWindArrows, \n      convertMetersToSvgY, calculateWindSpeedAtHeight\n    );\n  }, [showWindArrows, convertMetersToSvgY]);\n  \n  // パラシュート描画関数のラッパー\n  const getParachute = useCallback((x, y, isOpen, deploymentProgress, rotation) => {\n    const rocketLength = mmToM(noseHeight + bodyHeight);\n    return getParachutePath(\n      x, y, isOpen, deploymentProgress, rotation,\n      rocketLength, selectedParachute, trajectoryScale\n    );\n  }, [noseHeight, bodyHeight, selectedParachute, trajectoryScale]);\n  \n  const getParachuteStrings = useCallback((x, y, isOpen, deploymentProgress, rotation) => {\n    const rocketLength = mmToM(noseHeight + bodyHeight);\n    return getParachuteStringPaths(\n      x, y, isOpen, deploymentProgress, rotation,\n      rocketLength, selectedParachute, trajectoryScale\n    );\n  }, [noseHeight, bodyHeight, selectedParachute, trajectoryScale]);\n  \n  // viewBox計算関数のラッパー\n  const computeDesignViewBox = useCallback(() => {\n    return getDesignViewBox(\n      design, noseHeight, bodyHeight, \n      finHeight, finSweepLength, finTipWidth, finBaseWidth, bodyWidth\n    );\n  }, [design, noseHeight, bodyHeight, finHeight, finSweepLength, finTipWidth, finBaseWidth, bodyWidth]);\n  \n  const computeAnalysisViewBox = useCallback(() => {\n    return getAnalysisViewBox(\n      analysis, noseHeight, bodyHeight, \n      finHeight, finSweepLength, finTipWidth, finBaseWidth, bodyWidth\n    );\n  }, [analysis, noseHeight, bodyHeight, finHeight, finSweepLength, finTipWidth, finBaseWidth, bodyWidth]);\n  \n  // 初期化後の計算値の更新\n  useEffect(() => {\n    if (!isInitialized) return;\n\n    // 投影面積、体積、圧力中心位置、空力中心位置を計算\n    const areas = calculateProjectedArea(simulationParams);\n    const volumeData = calculateVolume(simulationParams);\n    const cpData = calculateCenterOfPressure(simulationParams);\n    const acData = calculateAerodynamicCenter(simulationParams);\n    const stabilityCpData = calculateStabilityCenterOfPressure(simulationParams);\n    const margins = calculateStaticMargin(simulationParams);\n    \n    // 状態を更新\n    setProjectedAreas(areas);\n    setVolumes(volumeData);\n    setPressureCenter(cpData);\n    setAerodynamicCenter(acData);\n    setStabilityCenterOfPressure(stabilityCpData);\n    setStaticMargins(margins);\n    \n  }, [isInitialized, simulationParams]);\n\n  // 動的に計算結果を更新する\n  useEffect(() => {\n    // 投影面積、体積、圧力中心位置、空力中心位置を計算\n    const areas = calculateProjectedArea(simulationParams);\n    const volumeData = calculateVolume(simulationParams);\n    const cpData = calculateCenterOfPressure(simulationParams);\n    const acData = calculateAerodynamicCenter(simulationParams);\n    const stabilityCpData = calculateStabilityCenterOfPressure(simulationParams);\n    const margins = calculateStaticMargin(simulationParams);\n    \n    // 状態を更新\n    setProjectedAreas(areas);\n    setVolumes(volumeData);\n    setPressureCenter(cpData);\n    setAerodynamicCenter(acData);\n    setStabilityCenterOfPressure(stabilityCpData);\n    setStaticMargins(margins);\n    \n  }, [simulationParams]);\n  \n  // 計算結果のキャッシュ\n  const calculations = useMemo(() => {\n    // 機体本体の高さ\n    const actualRocketHeight = noseHeight + bodyHeight;\n    // フィンの後端がボディ後端よりも出る場合の計算\n    const finExtension = Math.max(0, finSweepLength + finTipWidth - finBaseWidth);\n    // 全長は機体長 + フィン後端部分\n    const totalHeight = actualRocketHeight + finExtension;\n    \n    // 圧力中心位置と空力中心位置（新しい計算結果を使用）\n    const cp = pressureCenter?.centerOfPressure || (totalHeight * 0.7);\n    const ac = aerodynamicCenter?.aerodynamicCenter || (totalHeight * 0.65);\n    const stabilityCp = stabilityCenterOfPressure?.stabilityCenterOfPressure || (totalHeight * 0.6);\n    \n    // 姿勢安定性マージン - 重心位置との距離\n    const standardMargin = staticMargins?.standardStaticMargin || ((cp - centerOfGravity) / bodyWidth);\n    const stabilityMargin = staticMargins?.stabilityStaticMargin || ((stabilityCp - centerOfGravity) / bodyWidth);\n    \n    // 新しい計算関数を使用してフィン限界速度を計算\n    const rocketParams = {\n      noseHeight, bodyHeight, bodyWidth, finHeight, finBaseWidth, finTipWidth, \n      finThickness, finSweepLength, finMaterial, centerOfGravity, weight\n    };\n    \n    const finDivergenceSpeed = calculateFinDivergenceSpeed(rocketParams);\n    const finFlutterSpeed = calculateFinFlutterSpeed(rocketParams);\n    \n    return {\n      totalHeight: totalHeight,\n      actualRocketHeight: actualRocketHeight,\n      finExtension: finExtension,\n      aerodynamicCenter: Math.round(ac),\n      pressureCenter: Math.round(cp),\n      stabilityCenterOfPressure: Math.round(stabilityCp),\n      standardStaticMargin: standardMargin.toFixed(2),\n      stabilityStaticMargin: stabilityMargin.toFixed(2),\n      finDivergenceSpeed: Math.round(finDivergenceSpeed),\n      finFlutterSpeed: Math.round(finFlutterSpeed),\n      // フォーマット済みの値を追加\n      finDivergenceSpeedDisplay: formatSpeedValue(finDivergenceSpeed),\n      finFlutterSpeedDisplay: formatSpeedValue(finFlutterSpeed)\n    };\n  }, [noseHeight, bodyHeight, finSweepLength, finTipWidth, finBaseWidth, bodyWidth, centerOfGravity, \n     pressureCenter, aerodynamicCenter, stabilityCenterOfPressure, staticMargins, \n     finHeight, finThickness, finMaterial, weight]);\n\n  // 現在の飛行フェーズを取得する関数\n  const getCurrentFlightPhase = useCallback(() => {\n    if (!isLaunched || !flightData || flightData.length === 0) {\n      return \"未発射\";\n    }\n\n    // プロパティの安全性を考慮して独自に計算\n    const timeIndex = Math.min(Math.floor(currentTime / 0.02), flightData.length - 1);\n    if (timeIndex < 0 || timeIndex >= flightData.length) {\n      return \"未発射\";\n    }\n\n    const currentData = flightData[timeIndex];\n    if (!currentData) {\n      return \"未発射\";\n    }\n\n    const position = {\n      isParachuteActive: currentData.isParachuteActive,\n      isParachuteEjected: currentData.isParachuteEjected\n    };\n\n    if (position.isParachuteActive) {\n      return \"パラシュート降下\";\n    } else if (position.isParachuteEjected) {\n      return \"パラシュート展開中\";\n    }\n\n    // 発射台からの距離を計算\n    const distanceFromStart = Math.sqrt(\n      currentData.physicsX * currentData.physicsX + \n      currentData.physicsY * currentData.physicsY\n    );\n\n    const onLaunchRail = distanceFromStart < PHYSICAL_CONSTANTS.launchRailLength;\n\n    if (onLaunchRail) {\n      return \"発射台上\";\n    }\n\n    // エンジン推力が残っているか確認\n    const thrustEndTime = MOTOR_THRUST_DATA[selectedMotor].length * 0.02;\n    if (currentTime <= thrustEndTime) {\n      return \"推力飛行\";\n    }\n\n    return \"慣性飛行\";\n  }, [isLaunched, flightData, currentTime, selectedMotor]);\n\n  // 現在の位置情報を取得\n  const getCurrentPosition = useCallback(() => {\n    if (!isLaunched || !flightData || flightData.length === 0) {\n      // 初期状態・未発射状態\n      return {\n        physicsX: 0,\n        physicsY: 0,\n        rotation: launchAngle,\n        isParachuteEjected: false,\n        isParachuteActive: false,\n        parachuteDeploymentProgress: 0,\n        horizontalDistance: 0,\n        finDeflection: 0\n      };\n    }\n\n    const timeIndex = Math.min(Math.floor(currentTime / 0.02), flightData.length - 1);\n    if (timeIndex < 0 || timeIndex >= flightData.length) {\n      return {\n        physicsX: 0,\n        physicsY: 0,\n        rotation: launchAngle,\n        isParachuteEjected: false,\n        isParachuteActive: false,\n        parachuteDeploymentProgress: 0,\n        horizontalDistance: 0,\n        finDeflection: 0\n      };\n    }\n\n    const currentData = flightData[timeIndex];\n    if (!currentData) {\n      return {\n        physicsX: 0,\n        physicsY: 0,\n        rotation: launchAngle,\n        isParachuteEjected: false,\n        isParachuteActive: false,\n        parachuteDeploymentProgress: 0,\n        horizontalDistance: 0,\n        finDeflection: 0\n      };\n    }\n\n    // すべての数値にNaNチェックを追加\n    return {\n      physicsX: isNaN(currentData.physicsX) ? 0 : currentData.physicsX,\n      physicsY: isNaN(currentData.physicsY) ? 0 : currentData.physicsY,\n      rotation: isNaN(currentData.omega) ? launchAngle : (currentData.omega * 180 / Math.PI),\n      isParachuteEjected: currentData.isParachuteEjected || false,\n      isParachuteActive: currentData.isParachuteActive || false,\n      parachuteDeploymentProgress: isNaN(currentData.parachuteDeploymentProgress) ? 0 : \n        (currentData.parachuteDeploymentProgress || 0),\n      torque: isNaN(currentData.torque) ? 0 : (currentData.torque || 0),\n      angleChangePerDt2: isNaN(currentData.angleChangePerDt2) ? 0 : (currentData.angleChangePerDt2 || 0),\n      horizontalDistance: isNaN(currentData.horizontalDistance) ? 0 : \n        (currentData.horizontalDistance || Math.abs(isNaN(currentData.physicsX) ? 0 : currentData.physicsX) || 0),\n      finDeflection: isNaN(currentData.finDeflection) ? 0 : (currentData.finDeflection || 0),\n      effectiveWindSpeed: isNaN(currentData.effectiveWindSpeed) ? 0 : (currentData.effectiveWindSpeed || 0)\n    };\n  }, [isLaunched, flightData, currentTime, launchAngle]);\n\n  // モーターに応じた初期スケール値を取得する関数\n  const getInitialScaleForMotor = (motorType) => {\n    const baseScales = {\n      '1/2A6-2': 16,  // 強化された値\n      'A8-3': 12,     // 強化された値\n      'B6-4': 8       // 強化された値\n    };\n    return baseScales[motorType] || 12; // デフォルト値も強化\n  };\n\n  // モーターのパワー係数を取得する関数\n  const getMotorPowerFactor = (motorType) => {\n    const powerFactors = {\n      '1/2A6-2': 0.6, // 調整された値\n      'A8-3': 0.5,    // 調整された値\n      'B6-4': 0.4     // 調整された値\n    };\n    return powerFactors[motorType] || 0.5; // デフォルト値も調整\n  };\n\n  // リセット関数を強化\n  const handleReset = useCallback(() => {\n    console.log('リセット処理開始');\n\n    // アニメーションをキャンセル\n    if (animationId) {\n      cancelAnimationFrame(animationId);\n      setAnimationId(null);\n    }\n\n    // 現在の結果を前回の結果として保存\n    if (flightResults) {\n      setLastFlightResults(flightResults);\n      setFlightResults(null);\n    }\n\n    // ポップアップを閉じる\n    setShowResultsPopup(false);\n\n    // すべての状態をリセット\n    setIsLaunched(false);\n    setFlightData([]);\n    setCurrentTime(0);\n    setCurrentHeight(0);\n    setCurrentSpeed(0);\n    setCurrentDistance(0);\n    setCurrentFinDeflection(0);\n    setCurrentMaxHeight(0);\n    setCurrentMaxSpeed(0);\n    setCurrentMaxDistance(0);\n    setCurrentMaxFinDeflection(0);\n\n    // 過去の飛行軌跡をクリア\n    setCompletedFlights([]); \n\n    // モーターに応じた適切なスケールを設定\n    const stableScale = getInitialScaleForMotor(selectedMotor);\n    setTrajectoryScale(stableScale);\n\n    // ロケットスケールも設定\n    const rocketScaleFactor = 0.03 * getMotorPowerFactor(selectedMotor);\n    setRocketScale(rocketScaleFactor);\n\n    console.log('シミュレーションが完全にリセットされました。新しいスケール: ', stableScale);\n  }, [animationId, flightResults, selectedMotor]);\n\n  // ポップアップを閉じる関数\n  const handleCloseResultsPopup = useCallback(() => {\n    setShowResultsPopup(false);\n    // 現在の結果を前回の結果として保存\n    if (flightResults) {\n      setLastFlightResults(flightResults);\n    }\n  }, [flightResults]);\n\n  const handleLaunch = useCallback(() => {\n    if (isLaunched) return;\n\n    try {\n      // 風速プロファイルを引数として渡す\n      const flight = calculateFlightPath(\n        simulationParams, \n        launchAngle, \n        windSpeed, \n        windProfile, // 風速プロファイルを追加\n        SVG_CONFIG\n      );\n      \n      if (!flight?.data?.length) {\n        console.error('フライトデータが空です');\n        return;\n      }\n\n      // 初期データを取得（最初のフレーム用）\n      const initialData = flight.data[0];\n      console.log('初期フライトデータ：', initialData);\n      console.log(`最高到達高度: ${flight.maxHeight.toFixed(2)}m, 最高速度: ${flight.maxSpeed.toFixed(2)}m/s, 最大水平距離: ${flight.maxDistance.toFixed(2)}m`);\n      console.log(`最大フィンたわみ量: ${flight.maxFinDeflection.toFixed(4)}mm`);\n      console.log(`姿勢安定性: 最大角度変化量=${flight.angleStability.maxAngleChangePerDt2.toFixed(2)}°`);\n      \n      // キーポイントを保存\n      setKeyPoints(flight.keyPoints);\n\n      setFlightData(flight.data);\n      setIsLaunched(true);\n      setCurrentTime(0);\n      \n      // 初期値を明示的に設定\n      setCurrentHeight(initialData.height || 0);\n      setCurrentSpeed(initialData.vy || 0);\n      setCurrentDistance(initialData.horizontalDistance || 0);\n      setCurrentFinDeflection(initialData.finDeflection || 0);\n      setCurrentMaxHeight(initialData.height || 0);\n      setCurrentMaxSpeed(Math.abs(initialData.speedMagnitude) || 0);\n      setCurrentMaxDistance(0); // 最大水平距離の初期値\n      setCurrentMaxFinDeflection(0); // 最大フィンたわみ量の初期値\n\n      // アニメーション開始時間を記録\n      const startTime = performance.now();\n      let firstFrame = true;\n      \n      const animate = (timestamp) => {\n        // 初回フレームの特別処理\n        if (firstFrame) {\n          firstFrame = false;\n          requestAnimationFrame(animate);\n          return;\n        }\n        \n        try {\n          // アニメーション開始からの累積時間を計算（ANIMATION_SPEEDで調整）\n          const elapsed = Math.max(0, (timestamp - startTime) / 1000 * ANIMATION_SPEED);\n          \n          // シミュレーションデータのインデックスを計算 - Math.maxを追加して負のインデックスを防止\n          const timeIndex = Math.max(0, Math.min(Math.floor(elapsed / 0.02), flight.data.length - 1));\n          \n          // 追加のデバッグログ - 100フレームごとに状態を記録\n          if (timeIndex % 100 === 0) {\n            console.log(`Animation frame: time=${elapsed.toFixed(2)}s, index=${timeIndex}, total=${flight.data.length}`);\n          }\n          \n          // データの安全性チェック\n          if (timeIndex >= 0 && timeIndex < flight.data.length) {\n            const currentData = flight.data[timeIndex];\n            \n            if (currentData && typeof currentData === 'object') {\n              // NaNチェックを追加\n              setCurrentTime(elapsed);\n              setCurrentHeight(isNaN(currentData.height) ? 0 : currentData.height || 0);\n              setCurrentSpeed(isNaN(currentData.vy) ? 0 : currentData.vy || 0);\n              setCurrentDistance(isNaN(currentData.horizontalDistance) ? 0 : \n                (currentData.horizontalDistance || Math.abs(isNaN(currentData.physicsX) ? 0 : currentData.physicsX) || 0));\n              \n              // フィンたわみ量のNaNチェック\n              const finDeflection = isNaN(currentData.finDeflection) ? 0 : currentData.finDeflection || 0;\n              setCurrentFinDeflection(finDeflection);\n              \n              // 最大値の安全な更新\n              setCurrentMaxHeight(prev => Math.max(prev, isNaN(currentData.height) ? 0 : currentData.height || 0));\n              setCurrentMaxSpeed(prev => Math.max(prev, isNaN(currentData.speedMagnitude) ? 0 : \n                Math.abs(currentData.speedMagnitude) || 0));\n              setCurrentMaxDistance(prev => Math.max(prev, isNaN(currentData.physicsX) ? 0 : \n                Math.abs(currentData.physicsX) || 0));\n              \n              // 最大フィンたわみ量の更新\n              setCurrentMaxFinDeflection(prev => Math.max(prev, finDeflection));\n\n              // アニメーションをデータの最後まで続けるようにする\n              if (timeIndex < flight.data.length - 1) {\n                const id = requestAnimationFrame(animate);\n                setAnimationId(id);\n              } else {\n                // アニメーション終了 - 最終フレームに到達した時だけ結果を表示\n                console.log('アニメーション完了: 最終インデックス到達');\n                \n                // シミュレーションデータから最大値を直接計算（状態変数に依存せず確実に取得）\n                const maxHeight = Math.max(...flight.data.map(d => isNaN(d.height) ? 0 : d.height || 0));\n                const maxSpeed = Math.max(...flight.data.map(d => isNaN(d.speedMagnitude) ? 0 : \n                  Math.abs(d.speedMagnitude) || 0));\n                const maxDistance = Math.max(...flight.data.map(d => isNaN(d.physicsX) ? 0 : \n                  Math.abs(d.physicsX) || 0));\n                const maxFinDeflection = Math.max(...flight.data.map(d => isNaN(d.finDeflection) ? 0 : \n                  d.finDeflection || 0));\n\n                // 飛行結果の評価（直接計算した最大値を使用）\n                const isDivergenceOK = maxSpeed < flight.calculations.finDivergenceSpeed;\n                const isFlutterOK = maxSpeed < flight.calculations.finFlutterSpeed;\n                const maxDeflectionPercent = (maxFinDeflection / finHeight) * 100;\n                const isDeflectionOK = maxDeflectionPercent <= 3;\n                \n                // 姿勢安定性の判定結果 - 最大角度偏差を使用しない\n                const isAngleStableOK = flight.angleStability.isAngleStableOK;\n                const maxAngleChangePerDt2 = flight.angleStability.maxAngleChangePerDt2;\n                \n                // 総合判定は全てのチェックをパスする必要がある\n                const isOverallOK = isDivergenceOK && isFlutterOK && isDeflectionOK && isAngleStableOK;\n\n                // 結果オブジェクトの作成\n                const results = {\n                  maxSpeed: maxSpeed,\n                  maxHeight: maxHeight,\n                  maxDistance: maxDistance,\n                  maxFinDeflection: maxFinDeflection,\n                  finHeight: finHeight,\n                  maxDeflectionPercent: maxDeflectionPercent,\n                  divergenceSpeed: formatSpeedValue(flight.calculations.finDivergenceSpeed),\n                  flutterSpeed: formatSpeedValue(flight.calculations.finFlutterSpeed),\n                  isDivergenceOK,\n                  isFlutterOK,\n                  isDeflectionOK,\n                  isAngleStableOK,\n                  maxAngleChangePerDt2,\n                  isOverallOK,\n                  launchAngle,\n                  windSpeed,\n                  windProfile\n                };\n\n                // 状態更新を一度に行う\n                setFlightResults(results);\n                setShowResultsPopup(true);\n\n                // UI上の最大値表示も更新\n                setCurrentMaxHeight(maxHeight);\n                setCurrentMaxSpeed(maxSpeed);\n                setCurrentMaxDistance(maxDistance);\n                setCurrentMaxFinDeflection(maxFinDeflection);\n\n                const completedFlightData = {\n                  data: [...flight.data],\n                  launchAngle,\n                  windSpeed,\n                  windProfile,\n                  maxHeight: maxHeight,\n                  maxSpeed: maxSpeed,\n                  maxDistance: maxDistance,\n                  maxFinDeflection: maxFinDeflection,\n                  scale: trajectoryScale,\n                  results: results // 結果も保存\n                };\n\n                setCompletedFlights(prevFlights => [...prevFlights, completedFlightData]);\n                setIsLaunched(false);\n              }              \n            }\n          }\n        } catch (error) {\n          // エラーが発生した場合は記録して次のフレームを試行\n          console.error('Animation frame error:', error);\n          \n          // 重大なエラーでなければ次のフレームを継続\n          if (timeIndex < flight.data.length - 1) {\n            const id = requestAnimationFrame(animate);\n            setAnimationId(id);\n          } else {\n            // エラー発生時も最終フレームに達していれば終了処理\n            handleReset();\n          }\n        }\n      };\n      \n      // アニメーション開始\n      requestAnimationFrame(animate);\n    } catch (error) {\n      console.error('Launch error:', error);\n      handleReset();\n    }\n  }, [isLaunched, launchAngle, windSpeed, windProfile, simulationParams, handleReset, finHeight, trajectoryScale]);\n\n  // パラメータ変更時のスケール更新\n  useEffect(() => {\n    if (isLaunched) return;\n\n    // 風速プロファイルを引数として渡す\n    const flight = calculateFlightPath(\n      simulationParams, \n      launchAngle, \n      windSpeed, \n      windProfile, // 風速プロファイルを追加\n      SVG_CONFIG\n    );\n\n    if (flight && flight.maxHeight > 0) {\n      const availableHeight = SVG_CONFIG.height - SVG_CONFIG.groundLevel;\n      \n      // 改良：より高いベース高さを設定\n      const baseHeights = {\n        '1/2A6-2': 100,\n        'A8-3': 150,\n        'B6-4': 200\n      };\n      \n      const expectedBaseHeight = baseHeights[simulationParams.selectedMotor] || 150;\n      const targetHeight = Math.max(flight.maxHeight * 1.3, expectedBaseHeight);\n      \n      const minHorizontalDistance = expectedBaseHeight * 0.9;\n      const maxDistance = Math.max(flight.maxDistance || 0, minHorizontalDistance);\n      \n      // スケール計算\n      const verticalScale = availableHeight / targetHeight;\n      const horizontalScale = (SVG_CONFIG.width * 0.9) / (maxDistance * 2 || 1);\n      \n      const motorPowerFactor = {\n        '1/2A6-2': 0.45,\n        'A8-3': 0.35,\n        'B6-4': 0.25\n      };\n      \n      const powerFactor = motorPowerFactor[simulationParams.selectedMotor] || 0.35;\n      \n      // 最小/最大スケール値の調整\n      const minScale = 10;\n      const maxScale = 24;\n      \n      const rawScale = Math.min(verticalScale, horizontalScale) * powerFactor;\n      // 最終スケールを調整 - 必ず最小スケールを適用\n      const finalScale = Math.max(minScale, Math.min(maxScale, rawScale));\n      \n      // スケール設定\n      setTrajectoryScale(finalScale);\n      \n      // ロケットスケールをさらに小さく\n      const baseRocketScale = 0.03;\n      setRocketScale(baseRocketScale * powerFactor);\n      \n      console.log(`パラメータ更新: モーター=${simulationParams.selectedMotor}, 高度=${flight.maxHeight.toFixed(1)}m, スケール=${finalScale.toFixed(2)}`);\n    }\n  }, [isLaunched, launchAngle, windSpeed, windProfile, simulationParams]);\n\n  // 初期表示時の強制スケール設定用のuseEffect追加\n  useEffect(() => {\n    // コンポーネント初期マウント時に強制的にスケールを設定\n    const initialScale = getInitialScaleForMotor(selectedMotor);\n    const initialRocketScale = 0.03 * getMotorPowerFactor(selectedMotor);\n    \n    setTrajectoryScale(initialScale);\n    setRocketScale(initialRocketScale);\n    \n    console.log(`初期表示: スケール=${initialScale}, ロケットスケール=${initialRocketScale}`);\n  }, []); // 空の依存配列で初回のみ実行\n\n  // クリーンアップ\n  useEffect(() => {\n    return () => {\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n      if (sliderTimeoutRef.current) {\n        clearTimeout(sliderTimeoutRef.current);\n      }\n    };\n  }, [animationId]);\n\n  // 本フックから公開する関数とパラメータ\n  return {\n    // デザインパラメータ\n    noseShape, setNoseShape: setNoseShapeAndUpdate,\n    noseHeight, setNoseHeight: debounce(setNoseHeight, SLIDER_DEBOUNCE_TIME),\n    bodyHeight, setBodyHeight: debounce(setBodyHeight, SLIDER_DEBOUNCE_TIME),\n    bodyWidth, setBodyWidth: debounce(setBodyWidth, SLIDER_DEBOUNCE_TIME),\n    finHeight, setFinHeight: debounce(setFinHeight, SLIDER_DEBOUNCE_TIME),\n    finBaseWidth, setFinBaseWidth: debounce(setFinBaseWidth, SLIDER_DEBOUNCE_TIME),\n    finTipWidth, setFinTipWidth: debounce(setFinTipWidth, SLIDER_DEBOUNCE_TIME),\n    finThickness, setFinThickness: debounce(setFinThickness, SLIDER_DEBOUNCE_TIME),\n    finSweepLength, setFinSweepLength: debounce(setFinSweepLength, SLIDER_DEBOUNCE_TIME),\n    finMaterial, setFinMaterial,\n    finCount, setFinCount,\n    \n    // 分析パラメータ\n    weight, setWeight: debounce(setWeight, SLIDER_DEBOUNCE_TIME),\n    centerOfGravity, setCenterOfGravity: debounce(setCenterOfGravity, SLIDER_DEBOUNCE_TIME),\n    selectedMotor, setSelectedMotor,\n    selectedParachute, setSelectedParachute,\n    \n    // シミュレーションパラメータ\n    launchAngle, setLaunchAngle: debounce(setLaunchAngle, SLIDER_DEBOUNCE_TIME),\n    windSpeed, setWindSpeed: debounce(setWindSpeed, SLIDER_DEBOUNCE_TIME),\n    windProfile, setWindProfile,\n    showWindArrows, setShowWindArrows,\n    \n    // シミュレーション状態\n    isLaunched, setIsLaunched,\n    flightData, currentTime,\n    currentHeight, currentSpeed, currentDistance, currentFinDeflection,\n    currentMaxHeight, currentMaxSpeed, currentMaxDistance, currentMaxFinDeflection,\n    completedFlights, keyPoints,\n    \n    // 表示設定\n    design, analysis,\n    trajectoryScale, rocketScale,\n    \n    // 新しい計算結果\n    projectedAreas, volumes, pressureCenter, aerodynamicCenter, stabilityCenterOfPressure, staticMargins,\n    \n    // 計算結果\n    calculations,\n    \n    // 初期化状態\n    isInitialized,\n\n    // スライダーのデータと更新関数\n    noseHeightInputRef, handleNoseHeight: handleSliderChange(noseHeightInputRef, setNoseHeight),\n    bodyHeightInputRef, handleBodyHeight: handleSliderChange(bodyHeightInputRef, setBodyHeight),\n    bodyWidthInputRef, handleBodyWidth: handleSliderChange(bodyWidthInputRef, setBodyWidth),\n    finHeightInputRef, handleFinHeight: handleSliderChange(finHeightInputRef, setFinHeight),\n    finBaseWidthInputRef, handleFinBaseWidth: handleSliderChange(finBaseWidthInputRef, setFinBaseWidth),\n    finTipWidthInputRef, handleFinTipWidth: handleSliderChange(finTipWidthInputRef, setFinTipWidth),\n    finThicknessInputRef, handleFinThickness: handleSliderChange(finThicknessInputRef, setFinThickness),\n    finSweepLengthInputRef, handleFinSweepLength: handleSliderChange(finSweepLengthInputRef, setFinSweepLength),\n    weightInputRef, handleWeight: handleSliderChange(weightInputRef, setWeight),\n    centerOfGravityInputRef, handleCenterOfGravity: handleSliderChange(centerOfGravityInputRef, setCenterOfGravity),\n    launchAngleInputRef, handleLaunchAngle: handleSliderChange(launchAngleInputRef, setLaunchAngle),\n    windSpeedInputRef, handleWindSpeed: handleSliderChange(windSpeedInputRef, setWindSpeed),\n    \n    // 描画関数 - 外部のレンダリング関数を呼び出すためのラッパー\n    getNosePath: (config) => getNosePath(config, noseShape, noseHeight, bodyWidth, bodyHeight),\n    getBodyPath: (config) => getBodyPath(config, bodyHeight, bodyWidth),\n    getLeftFinPath: (config) => getLeftFinPath(config, bodyWidth, finHeight, finBaseWidth, finSweepLength, finTipWidth),\n    getRightFinPath: (config) => getRightFinPath(config, bodyWidth, finHeight, finBaseWidth, finSweepLength, finTipWidth),\n    getCenterFinsPath: (config) => getCenterFinsPath(config, finThickness, finBaseWidth, finSweepLength, finTipWidth),\n    getParachutePath: getParachute,\n    getParachuteStringPaths: getParachuteStrings,\n    getWindArrow,\n    getWindProfileArrows: getWindArrows,\n\n    // 座標変換\n    metersToSvgX: convertMetersToSvgX,\n    metersToSvgY: convertMetersToSvgY,\n    \n    // viewBox計算\n    getDesignViewBox: computeDesignViewBox,\n    getAnalysisViewBox: computeAnalysisViewBox,\n    \n    // ユーティリティ関数\n    getActualRocketDimensions: getRocketDimensions,\n    getCurrentPosition,\n    calculateWindSpeedAtHeight,\n    formatFinDeflection,\n    getSafeValue,\n    \n    // 操作関数\n    handleLaunch, \n    handleReset,\n\n    // 結果表示関連\n    showResultsPopup,\n    flightResults,\n    lastFlightResults,\n    getCurrentFlightPhase,\n    handleCloseResultsPopup\n  };\n};\n\n\n// 統合されたロケットシミュレーターコンポーネント\nconst IntegratedRocketSimulator = () => {\n  const [activeTab, setActiveTab] = useState(UI_CONFIG.defaultTab);\n  const [debugView, setDebugView] = useState(false);\n\n  // ロケットシミュレーターフックを使用\n  const rocketSim = useRocketSimulator();\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-4\">\n      <h2 className=\"text-2xl font-bold mb-4\">AVIENTER_2D</h2>\n      \n      <div className=\"flex border-b mb-6\">\n        <button \n          className={`px-6 py-3 font-medium ${activeTab === 'design' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'} rounded-t-lg`}\n          onClick={() => setActiveTab('design')}\n        >\n          形状設計\n        </button>\n        <button \n          className={`px-6 py-3 font-medium ${activeTab === 'analysis' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'} rounded-t-lg ml-1`}\n          onClick={() => setActiveTab('analysis')}\n        >\n          重量・空力特性\n        </button>\n        <button \n          className={`px-6 py-3 font-medium ${activeTab === 'simulation' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'} rounded-t-lg ml-1`}\n          onClick={() => setActiveTab('simulation')}\n        >\n          飛行シミュレーション\n        </button>\n      </div>\n      \n      <div>\n        {activeTab === 'design' && <DesignTab rocketSim={rocketSim} />}\n        {activeTab === 'analysis' && <AnalysisTab rocketSim={rocketSim} getSafeValue={getSafeValue} />}\n        {activeTab === 'simulation' && <SimulationTab rocketSim={rocketSim} debugView={debugView} setDebugView={setDebugView} />}\n      </div>\n      \n      {/* 著作権・免責事項フッター */}\n      <div className=\"mt-8 pt-4 border-t border-gray-300 text-sm text-gray-600\">\n        <p className=\"mb-1\">© 2025 AVIATOL - ご利用は個人での範囲に限ります</p>\n        <p className=\"mb-1\">許可がない場合、商用でのご利用はご遠慮ください</p>\n        <p className=\"mb-1\">紹介目的でのご利用はこの限りではありません</p>\n        <p className=\"mb-1\">ご紹介いただける場合は、info(a)aviatol.comまでご連絡をお願いします（(a)は@に変えてください）</p>\n        <p className=\"mb-1\">本シミュレーションは実機での動作を保証するものではありません</p>\n        <p>ロケットの打上げは自身と周りの安全に十分配慮し、個人の責任の範囲で行なってください</p>\n      </div>\n    </div>\n  );\n};\n\nexport default IntegratedRocketSimulator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}