{"ast":null,"code":"// SVG描画関連の関数\nimport React from 'react';\nimport { SVG_CONFIG, ANALYSIS_VIEW_CONFIG } from './RocketConstants';\n\n// 安全な値を取得するユーティリティ関数 - より強化されたバージョン\nexport const getSafeValue = (value, defaultValue = 0) => {\n  // 値がnull、undefined、NaN、無限大の場合はデフォルト値を返す\n  if (value === null || value === undefined || isNaN(value) || !isFinite(value)) {\n    return defaultValue;\n  }\n  // 数値型でない場合、変換を試みる\n  if (typeof value !== 'number') {\n    const parsed = parseFloat(value);\n    // 変換できなければデフォルト値を返す\n    return isNaN(parsed) ? defaultValue : parsed;\n  }\n  return value;\n};\n\n// SVG描画関数 - 修正版\nexport const getNosePath = (config, noseShape, noseHeight, bodyWidth, bodyHeight) => {\n  // configが有効かどうかを確認\n  if (!config || typeof config !== 'object' || !('centerX' in config) || !('height' in config)) {\n    console.warn('getNosePath: Invalid config object', config);\n    // デフォルト設定を作成\n    config = {\n      centerX: 400,\n      height: 550\n    };\n  }\n\n  // 各パラメータの安全な取り扱い\n  noseHeight = getSafeValue(noseHeight, 50);\n  bodyWidth = getSafeValue(bodyWidth, 30);\n  bodyHeight = getSafeValue(bodyHeight, 100);\n  const startX = config.centerX - bodyWidth / 2;\n  const endX = config.centerX + bodyWidth / 2;\n  const baseY = config.height - bodyHeight;\n  const topY = baseY - noseHeight;\n  if (noseShape === \"cone\") {\n    // 円錐ノーズ\n    return `M ${startX} ${baseY} L ${config.centerX} ${topY} L ${endX} ${baseY} Z`;\n  } else if (noseShape === \"parabola\") {\n    // 放物線ノーズ\n    const controlY = topY + noseHeight * 0.15;\n    return `M ${startX} ${baseY} \n            C ${startX} ${controlY}, ${config.centerX} ${topY}, ${config.centerX} ${topY}\n            C ${config.centerX} ${topY}, ${endX} ${controlY}, ${endX} ${baseY} Z`;\n  } else {\n    // オジブノーズ\n    const halfWidth = bodyWidth / 2;\n    return `M ${startX} ${baseY}\n            Q ${startX + halfWidth * 0.1} ${topY + noseHeight * 0.4}, ${config.centerX} ${topY}\n            Q ${endX - halfWidth * 0.1} ${topY + noseHeight * 0.4}, ${endX} ${baseY} Z`;\n  }\n};\nexport const getBodyPath = (config, bodyHeight, bodyWidth) => {\n  // configが有効かどうかを確認\n  if (!config || typeof config !== 'object' || !('centerX' in config) || !('height' in config)) {\n    console.warn('getBodyPath: Invalid config object', config);\n    // デフォルト設定を作成\n    config = {\n      centerX: 400,\n      height: 550\n    };\n  }\n  bodyHeight = getSafeValue(bodyHeight, 100);\n  bodyWidth = getSafeValue(bodyWidth, 30);\n  const startX = config.centerX - bodyWidth / 2;\n  const endX = config.centerX + bodyWidth / 2;\n  const baseY = config.height;\n  const topY = baseY - bodyHeight;\n  return `M ${startX} ${baseY} \n          L ${startX} ${topY} \n          L ${endX} ${topY} \n          L ${endX} ${baseY} Z`;\n};\nexport const getLeftFinPath = (config, bodyWidth, finHeight, finBaseWidth, finSweepLength, finTipWidth) => {\n  // configが有効かどうかを確認\n  if (!config || typeof config !== 'object' || !('centerX' in config) || !('height' in config)) {\n    console.warn('getLeftFinPath: Invalid config object', config);\n    // デフォルト設定を作成\n    config = {\n      centerX: 400,\n      height: 550\n    };\n  }\n\n  // 安全なパラメータ処理\n  bodyWidth = getSafeValue(bodyWidth, 30);\n  finHeight = getSafeValue(finHeight, 40);\n  finBaseWidth = getSafeValue(finBaseWidth, 30);\n  finSweepLength = getSafeValue(finSweepLength, 0);\n  finTipWidth = getSafeValue(finTipWidth, 20);\n  const bodyLeftX = config.centerX - bodyWidth / 2;\n  const finBottomY = config.height;\n  const finTopY = finBottomY - finBaseWidth;\n\n  // フィンの翼端位置を正確に計算\n  const tipTopY = finTopY + finSweepLength;\n  const tipBottomY = tipTopY + finTipWidth;\n  return `M ${bodyLeftX} ${finTopY}\n          L ${bodyLeftX} ${finBottomY}\n          L ${bodyLeftX - finHeight} ${tipBottomY}\n          L ${bodyLeftX - finHeight} ${tipTopY} Z`;\n};\nexport const getRightFinPath = (config, bodyWidth, finHeight, finBaseWidth, finSweepLength, finTipWidth) => {\n  // configが有効かどうかを確認\n  if (!config || typeof config !== 'object' || !('centerX' in config) || !('height' in config)) {\n    console.warn('getRightFinPath: Invalid config object', config);\n    // デフォルト設定を作成\n    config = {\n      centerX: 400,\n      height: 550\n    };\n  }\n\n  // 安全なパラメータ処理\n  bodyWidth = getSafeValue(bodyWidth, 30);\n  finHeight = getSafeValue(finHeight, 40);\n  finBaseWidth = getSafeValue(finBaseWidth, 30);\n  finSweepLength = getSafeValue(finSweepLength, 0);\n  finTipWidth = getSafeValue(finTipWidth, 20);\n  const bodyRightX = config.centerX + bodyWidth / 2;\n  const finBottomY = config.height;\n  const finTopY = finBottomY - finBaseWidth;\n\n  // フィンの翼端位置を正確に計算\n  const tipTopY = finTopY + finSweepLength;\n  const tipBottomY = tipTopY + finTipWidth;\n  return `M ${bodyRightX} ${finTopY}\n          L ${bodyRightX} ${finBottomY}\n          L ${bodyRightX + finHeight} ${tipBottomY}\n          L ${bodyRightX + finHeight} ${tipTopY} Z`;\n};\nexport const getCenterFinsPath = (config, finThickness, finBaseWidth, finSweepLength, finTipWidth) => {\n  // configが有効かどうかを確認\n  if (!config || typeof config !== 'object' || !('centerX' in config) || !('height' in config)) {\n    console.warn('getCenterFinsPath: Invalid config object', config);\n    // デフォルト設定を作成\n    config = {\n      centerX: 400,\n      height: 550\n    };\n  }\n\n  // 安全なパラメータ処理\n  finThickness = getSafeValue(finThickness, 2);\n  finBaseWidth = getSafeValue(finBaseWidth, 30);\n  finSweepLength = getSafeValue(finSweepLength, 0);\n  finTipWidth = getSafeValue(finTipWidth, 20);\n  const halfThickness = finThickness / 2;\n  const finBottomY = config.height;\n  const finTopY = finBottomY - finBaseWidth;\n\n  // フィンの後端が左右のフィンと揃うように調整\n  const finExtension = Math.max(0, finSweepLength + finTipWidth - finBaseWidth);\n  return `M ${config.centerX - halfThickness} ${finTopY}\n          L ${config.centerX - halfThickness} ${finBottomY}\n          L ${config.centerX - halfThickness} ${finBottomY + finExtension}\n          L ${config.centerX + halfThickness} ${finBottomY + finExtension}\n          L ${config.centerX + halfThickness} ${finBottomY}\n          L ${config.centerX + halfThickness} ${finTopY} Z`;\n};\n\n// 姿勢表示用に中央のフィンを描画する関数\nexport const getCenterFinsPathForAttitude = (x, y, params) => {\n  // configが有効かどうかを確認\n  if (!config || typeof config !== 'object' || !('centerX' in config) || !('height' in config)) {\n    console.warn('getCenterFinsPathForAttitude: Invalid config object', config);\n    // デフォルト設定を作成\n    config = {\n      centerX: 400,\n      height: 550\n    };\n  }\n\n  // 安全なパラメータ処理\n  finThickness = getSafeValue(finThickness, 2);\n  finBaseWidth = getSafeValue(finBaseWidth, 30);\n  finSweepLength = getSafeValue(finSweepLength, 0);\n  finTipWidth = getSafeValue(finTipWidth, 20);\n  const halfThickness = params.finThickness / 2;\n  const finBottomY = y;\n  const finTopY = finBottomY - params.finBaseWidth;\n\n  // フィンの翼端位置を正確に計算\n  const tipTopY = finTopY + params.finSweepLength;\n  const tipBottomY = tipTopY + params.finTipWidth;\n\n  // フィンの後端が左右のフィンと揃うように調整\n  // フィンの翼端長がボディ後端よりも伸びる場合を計算\n  const finExtension = Math.max(0, params.finSweepLength + params.finTipWidth - params.finBaseWidth);\n  return `M ${x - halfThickness} ${finTopY}\n          L ${x - halfThickness} ${finBottomY}\n          L ${x - halfThickness} ${finBottomY + finExtension}\n          L ${x + halfThickness} ${finBottomY + finExtension}\n          L ${x + halfThickness} ${finBottomY}\n          L ${x + halfThickness} ${finTopY} Z`;\n};\n\n// シミュレーションタブ用のロケット描画関数を追加\nexport const drawInitialRocket = (centerX, centerY, params, rotation) => {\n  // 回転を考慮した変換\n  const transform = `translate(${centerX}, ${centerY}) rotate(${rotation})`;\n\n  // 各部品のパス計算\n  const bodyPath = `M ${-params.bodyWidth / 2} ${-params.bodyHeight} \n                     L ${-params.bodyWidth / 2} ${0} \n                     L ${params.bodyWidth / 2} ${0} \n                     L ${params.bodyWidth / 2} ${-params.bodyHeight} Z`;\n  let nosePath;\n  if (params.noseShape === \"cone\") {\n    nosePath = `M ${-params.bodyWidth / 2} ${-params.bodyHeight} \n                  L ${0} ${-params.bodyHeight - params.noseHeight} \n                  L ${params.bodyWidth / 2} ${-params.bodyHeight} Z`;\n  } else if (params.noseShape === \"parabola\") {\n    nosePath = `M ${-params.bodyWidth / 2} ${-params.bodyHeight} \n                  Q ${0} ${-params.bodyHeight - params.noseHeight * 1.2}, \n                    ${params.bodyWidth / 2} ${-params.bodyHeight} Z`;\n  } else {\n    // ogive\n    nosePath = `M ${-params.bodyWidth / 2} ${-params.bodyHeight} \n                  Q ${0} ${-params.bodyHeight - params.noseHeight * 1.1}, \n                    ${params.bodyWidth / 2} ${-params.bodyHeight} Z`;\n  }\n  const leftFinPath = `M ${-params.bodyWidth / 2} ${-params.finBaseWidth} \n                         L ${-params.bodyWidth / 2} ${0} \n                         L ${-params.bodyWidth / 2 - params.finHeight} ${params.finSweepLength} \n                         L ${-params.bodyWidth / 2 - params.finHeight} ${params.finSweepLength - params.finTipWidth} Z`;\n  const rightFinPath = `M ${params.bodyWidth / 2} ${-params.finBaseWidth} \n                          L ${params.bodyWidth / 2} ${0} \n                          L ${params.bodyWidth / 2 + params.finHeight} ${params.finSweepLength} \n                          L ${params.bodyWidth / 2 + params.finHeight} ${params.finSweepLength - params.finTipWidth} Z`;\n  return {\n    transform,\n    bodyPath,\n    nosePath,\n    leftFinPath,\n    rightFinPath,\n    centerFinsPath: `M ${-params.finThickness / 2} ${-params.finBaseWidth} \n                      L ${-params.finThickness / 2} ${0} \n                      L ${params.finThickness / 2} ${0} \n                      L ${params.finThickness / 2} ${-params.finBaseWidth} Z`\n  };\n};\n\n// フィンを取得する総合的な関数\nexport const getFinPaths = (x, y, params, deflection = 0) => {\n  const bodyLeftX = x - params.bodyWidth / 2;\n  const bodyRightX = x + params.bodyWidth / 2;\n  const finBottomY = y;\n  const finTopY = finBottomY - params.finBaseWidth;\n\n  // たわみを考慮した修正\n  const deflectionAngle = deflection * Math.PI / 180; // ラジアンに変換\n\n  // 翼端長がボディ後端より後ろに出るように調整\n  const tipTopY = finTopY + params.finSweepLength;\n  const tipBottomY = tipTopY + params.finTipWidth;\n\n  // たわみを適用したフィン座標\n  const leftFinTipX = bodyLeftX - params.finHeight * Math.cos(deflectionAngle);\n  const leftFinTipY = tipTopY + params.finHeight * Math.sin(deflectionAngle);\n  const leftFinBottomTipX = bodyLeftX - params.finHeight * Math.cos(deflectionAngle);\n  const leftFinBottomTipY = tipBottomY + params.finHeight * Math.sin(deflectionAngle);\n  const rightFinTipX = bodyRightX + params.finHeight * Math.cos(deflectionAngle);\n  const rightFinTipY = tipTopY + params.finHeight * Math.sin(deflectionAngle);\n  const rightFinBottomTipX = bodyRightX + params.finHeight * Math.cos(deflectionAngle);\n  const rightFinBottomTipY = tipBottomY + params.finHeight * Math.sin(deflectionAngle);\n  const leftFin = `M ${bodyLeftX} ${finTopY}\n                  L ${bodyLeftX} ${finBottomY}\n                  L ${leftFinBottomTipX} ${leftFinBottomTipY}\n                  L ${leftFinTipX} ${leftFinTipY} Z`;\n  const rightFin = `M ${bodyRightX} ${finTopY}\n                  L ${bodyRightX} ${finBottomY}\n                  L ${rightFinBottomTipX} ${rightFinBottomTipY}\n                  L ${rightFinTipX} ${rightFinTipY} Z`;\n  const halfThickness = params.finThickness / 2;\n  const centerFins = `M ${x - halfThickness} ${finTopY}\n                    L ${x - halfThickness} ${finBottomY}\n                    L ${x + halfThickness} ${finBottomY}\n                    L ${x + halfThickness} ${finTopY} Z`;\n  return {\n    leftFin,\n    rightFin,\n    centerFins\n  };\n};\n\n// 風向き矢印の描画関数\nexport const getWindArrow = windSpeed => {\n  if (windSpeed === 0) return null;\n\n  // 風速に基づいた矢印の長さ\n  const arrowLength = Math.min(100, Math.max(40, Math.abs(windSpeed) * 10));\n\n  // 「風速: X m/s」テキストの中央位置\n  const textCenter = 85; // テキスト中央のx座標\n  const y = 50; // テキスト下のy座標\n\n  // 矢印の色と太さを取得\n  const color = getWindArrowColor(windSpeed);\n  const strokeWidth = getWindArrowWidth(windSpeed);\n\n  // 矢印の頭の大きさ\n  const headSize = 15;\n\n  // 風速の符号で場合分け\n  if (windSpeed < 0) {\n    // マイナスの場合 - 右向き矢印\n    const startX = textCenter - arrowLength / 2;\n    const endX = textCenter + arrowLength / 2;\n    return {\n      line: `M ${startX} ${y} L ${endX} ${y}`,\n      head: `M ${endX - headSize} ${y - headSize / 2} L ${endX} ${y} L ${endX - headSize} ${y + headSize / 2}`,\n      y: y,\n      color: color,\n      strokeWidth: strokeWidth\n    };\n  } else {\n    // プラスの場合 - 左向き矢印だが、矢じりは右端\n    const lineStart = textCenter - arrowLength / 2;\n    const lineEnd = textCenter + arrowLength / 2;\n    return {\n      line: `M ${lineStart} ${y} L ${lineEnd} ${y}`,\n      head: `M ${lineStart + headSize} ${y - headSize / 2} L ${lineStart} ${y} L ${lineStart + headSize} ${y + headSize / 2}`,\n      y: y,\n      color: color,\n      strokeWidth: strokeWidth\n    };\n  }\n};\n\n// 風速に応じた矢印の色を取得する関数\nexport const getWindArrowColor = speed => {\n  const absSpeed = Math.abs(speed);\n  if (absSpeed >= 6) return \"#e74c3c\"; // 強風: 赤色\n  if (absSpeed >= 3) return \"#f39c12\"; // 中風: オレンジ/黄色\n  return \"#2ecc71\"; // 弱風: 緑色\n};\n\n// 風速に応じた矢印の線の太さを取得する関数\nexport const getWindArrowWidth = speed => {\n  const absSpeed = Math.abs(speed);\n  if (absSpeed >= 6) return 5; // 強風: より太い線\n  if (absSpeed >= 3) return 4; // 中風: やや太い線\n  return 3; // 弱風: 通常の線\n};\n\n// パラシュート表示を改良\nexport const getParachutePath = (x, y, isOpen, deploymentProgress = 1.0, rotation = 0, rocketLength, selectedParachute, trajectoryScale) => {\n  if (!isOpen) return \"\";\n\n  // ロケットの長さを基準に計算\n  // 基準距離を短くして調整（1.5倍にする）\n  const baseOffsetDistance = rocketLength * 1.5;\n  const offsetDistance = baseOffsetDistance * trajectoryScale * deploymentProgress;\n\n  // 機体の上部に常に配置するため、回転角度を無視\n  // xは変更せず、yだけ上方向に移動\n  const parachuteX = x;\n  const parachuteY = y - offsetDistance;\n\n  // パラシュートサイズの計算\n  const parachuteSize = parseInt(selectedParachute.slice(1)) / 1000 / 2 * trajectoryScale * deploymentProgress;\n\n  // パラシュートのパスを描画\n  return `M ${parachuteX - parachuteSize} ${parachuteY}\n          C ${parachuteX - parachuteSize} ${parachuteY - parachuteSize * 0.8},\n            ${parachuteX} ${parachuteY - parachuteSize * 1.2},\n            ${parachuteX + parachuteSize} ${parachuteY - parachuteSize * 0.8}\n          C ${parachuteX + parachuteSize} ${parachuteY - parachuteSize * 0.8},\n            ${parachuteX + parachuteSize} ${parachuteY},\n            ${parachuteX + parachuteSize} ${parachuteY}\n          Z`;\n};\n\n// パラシュートの紐を描画\nexport const getParachuteStringPaths = (x, y, isOpen, deploymentProgress = 1.0, rotation = 0, rocketLength, selectedParachute, trajectoryScale) => {\n  if (!isOpen) return '';\n\n  // パラシュート本体と全く同じ計算を使用して一貫性を確保\n  const baseOffsetDistance = rocketLength * 1.5;\n  const offsetDistance = baseOffsetDistance * trajectoryScale * deploymentProgress;\n\n  // 機体の上部に常に配置\n  const parachuteX = x;\n  const parachuteY = y - offsetDistance;\n\n  // パラシュートサイズも同一の計算で\n  const parachuteSize = parseInt(selectedParachute.slice(1)) / 1000 / 2 * trajectoryScale * deploymentProgress;\n\n  // キャノピーの各部分の座標を計算\n  const canopyLeftX = parachuteX - parachuteSize;\n  const canopyRightX = parachuteX + parachuteSize;\n  const canopyBottomY = parachuteY;\n  const canopyCenterX = parachuteX;\n  const canopyCenterTopY = parachuteY - parachuteSize * 0.5;\n\n  // 紐のパスを描画 - ロケット位置からキャノピーの各点まで\n  return `M ${x} ${y} L ${canopyLeftX} ${canopyBottomY}\n          M ${x} ${y} L ${canopyCenterX} ${canopyCenterTopY}\n          M ${x} ${y} L ${canopyRightX} ${canopyBottomY}`;\n};\n\n// メートル単位からSVG座標への変換関数\nexport const metersToSvgX = (meters, trajectoryScale) => {\n  // NaNチェック追加\n  if (isNaN(meters)) {\n    console.warn('metersToSvgX: 無効なメートル値', meters);\n    return SVG_CONFIG.centerX;\n  }\n\n  // trajectoryScaleが数値でない場合のフォールバック\n  if (typeof trajectoryScale !== 'number' || isNaN(trajectoryScale) || trajectoryScale <= 0) {\n    console.warn('metersToSvgX: 無効なtrajectoryScale', trajectoryScale);\n    trajectoryScale = 10.0; // より安全なデフォルト値\n  }\n  return SVG_CONFIG.centerX + meters * trajectoryScale;\n};\nexport const metersToSvgY = (meters, trajectoryScale) => {\n  // NaNチェック\n  if (isNaN(meters)) {\n    console.warn('metersToSvgY: 無効なメートル値', meters);\n    return SVG_CONFIG.groundLevel;\n  }\n\n  // trajectoryScaleが数値でない場合のフォールバック\n  if (typeof trajectoryScale !== 'number' || isNaN(trajectoryScale) || trajectoryScale <= 0) {\n    console.warn('metersToSvgY: 無効なtrajectoryScale', trajectoryScale);\n    trajectoryScale = 10.0; // より安全なデフォルト値\n  }\n  return SVG_CONFIG.groundLevel - meters * trajectoryScale;\n};\n\n// 姿勢表示用のロケットスケールを自動計算する関数を追加\nexport const calculateAttitudeDisplayScale = (rocketParams, circleRadius = 90) => {\n  try {\n    // 必要なパラメータを安全に取得\n    const noseHeight = getSafeValue(rocketParams.noseHeight, 50);\n    const bodyHeight = getSafeValue(rocketParams.bodyHeight, 200);\n    const finSweepLength = getSafeValue(rocketParams.finSweepLength, 0);\n    const finTipWidth = getSafeValue(rocketParams.finTipWidth, 20);\n    const finBaseWidth = getSafeValue(rocketParams.finBaseWidth, 30);\n\n    // ロケットの寸法を計算\n    const actualRocketHeight = noseHeight + bodyHeight;\n    const finExtension = Math.max(0, finSweepLength + finTipWidth - finBaseWidth);\n    const totalHeight = actualRocketHeight + finExtension;\n\n    // スケール計算 - 安全範囲内に制限\n    const rawScale = circleRadius * 1.6 / Math.max(50, totalHeight);\n    return Math.max(0.01, Math.min(2.0, rawScale));\n  } catch (error) {\n    console.error('calculateAttitudeDisplayScale エラー:', error);\n    return 0.3; // エラー時のデフォルト値\n  }\n};\n\n// 視覚化のための風速高度分布矢印を描画する関数\nexport const getWindProfileArrows = (baseWindSpeed, profile, showWindArrows, metersToSvgY, calculateWindSpeedAtHeight) => {\n  if (!showWindArrows) return [];\n\n  // 表示する高度レベル（メートル）\n  const heights = [0, 20, 40, 60, 80];\n  return heights.map(height => {\n    // 各高度での風速を計算\n    const windSpeed = calculateWindSpeedAtHeight(baseWindSpeed, height, profile);\n\n    // SVG座標に変換\n    const y = metersToSvgY(height);\n\n    // 風速によって矢印の長さを制限して表示範囲内に収める\n    // 最大長さをより小さく設定し、範囲内に確実に収める\n    const maxArrowLength = 60; // 最大長さを短くして確実に範囲内に収める\n    const minArrowLength = 20; // 最小長さ\n    const arrowLength = Math.min(maxArrowLength, Math.max(minArrowLength, Math.abs(windSpeed) * 6));\n    const color = getWindArrowColor(windSpeed);\n    const strokeWidth = getWindArrowWidth(windSpeed);\n\n    // 表示位置の調整 - 右に寄せて表示するように修正\n    const startX = 80; // 右寄りに配置\n    // 矢印の向きを修正 - 既存の風向き矢印と同じロジック\n    const direction = windSpeed < 0 ? 1 : -1; // 負の風速で右向き、正の風速で左向き\n\n    // 矢印の端点の位置を計算\n    const endX = startX + arrowLength * direction;\n\n    // テキスト位置の調整\n    // 矢印の長さと方向に応じてテキスト位置を調整し、矢印から適切な距離に配置\n    const textOffsetX = direction > 0 ? 12 : -35; // テキストのオフセット\n\n    return {\n      height,\n      windSpeed,\n      y,\n      arrowPath: {\n        // 矢印の線\n        line: `M ${startX} ${y} L ${endX} ${y}`,\n        // 矢印の頭\n        head: direction > 0 ? `M ${endX - 10} ${y - 5} L ${endX} ${y} L ${endX - 10} ${y + 5}` : `M ${endX + 10} ${y - 5} L ${endX} ${y} L ${endX + 10} ${y + 5}`,\n        // 風速テキスト - 常に表示範囲内に収まるように位置調整\n        textX: endX + textOffsetX,\n        textY: y,\n        color,\n        strokeWidth\n      }\n    };\n  });\n};\n\n// 安全な回転属性を生成する関数\nexport const getSafeRotationTransform = (rotation, x, y) => {\n  // 全ての値にNaNチェック\n  const safeRotation = isNaN(rotation) ? 0 : rotation;\n  const safeX = isNaN(x) ? SVG_CONFIG.centerX : x;\n  const safeY = isNaN(y) ? SVG_CONFIG.groundLevel : y;\n  return `rotate(${safeRotation} ${safeX} ${safeY})`;\n};\n\n// ロケット寸法計算関数\nexport const getActualRocketDimensions = (config, noseHeight, bodyHeight, finSweepLength, finTipWidth, finBaseWidth) => {\n  const rocketTopY = config.height - bodyHeight - noseHeight;\n  // 機体全長の計算 - ノーズとボディの高さ\n  const actualRocketHeight = noseHeight + bodyHeight;\n  // フィンの後端がボディ後端よりも出る場合の計算\n  const finExtension = Math.max(0, finSweepLength + finTipWidth - finBaseWidth);\n  // 全長は機体長 + フィン後端部分\n  const totalHeight = actualRocketHeight + finExtension;\n  return {\n    rocketTopY,\n    actualRocketHeight,\n    totalHeight\n  };\n};\n\n// 設計タブ用のviewBox計算関数\nexport const getDesignViewBox = (design, noseHeight, bodyHeight, finHeight, finSweepLength, finTipWidth, finBaseWidth, bodyWidth) => {\n  // 直接ロケット寸法を計算\n  const rocketTopY = design.height - bodyHeight - noseHeight;\n  const actualRocketHeight = noseHeight + bodyHeight;\n  const finExtension = Math.max(0, finSweepLength + finTipWidth - finBaseWidth);\n  const totalHeight = actualRocketHeight + finExtension;\n\n  // フィンの左右の最大幅を計算\n  const maxFinWidth = finHeight;\n\n  // 左右のマージンを追加 - より広いマージンを確保\n  const horizontalMargin = Math.max(maxFinWidth + 20, design.width * 0.25);\n\n  // 垂直方向のマージンを追加 - 新規追加\n  const verticalMargin = Math.max(totalHeight * 0.2, 50);\n\n  // 全幅 (ボディ幅 + 左右のフィン)\n  const totalWidth = bodyWidth + maxFinWidth * 2;\n\n  // 余裕を持たせた表示エリアのサイズ - 余裕を増やす\n  const paddedHeight = totalHeight * 1.4; // 40%の余裕に増加\n  const paddedWidth = totalWidth * 1.4; // 40%の余裕に増加\n\n  // 表示エリアのアスペクト比\n  const viewBoxAspectRatio = design.width / design.height;\n\n  // ロケットのアスペクト比と比較して表示方法を決定\n  let viewBoxWidth, viewBoxHeight;\n  if (paddedWidth / paddedHeight > viewBoxAspectRatio) {\n    // 幅が制限要素の場合\n    viewBoxWidth = paddedWidth;\n    viewBoxHeight = paddedWidth / viewBoxAspectRatio;\n  } else {\n    // 高さが制限要素の場合\n    viewBoxHeight = paddedHeight;\n    viewBoxWidth = paddedHeight * viewBoxAspectRatio;\n  }\n\n  // 表示領域を計算 - 上部に余裕を持たせるように変更\n  return `-${horizontalMargin} -${verticalMargin} ${design.width + horizontalMargin * 2} ${design.height + verticalMargin * 2}`;\n};\n\n// 重量・空力特性タブ用のviewBox計算関数（改善版）\nexport const getAnalysisViewBox = () => {\n  // ロケットが確実に中央に表示されるようなviewBox\n  return \"-200 -400 400 800\";\n};\n\n// ロケットの拡大率を計算する関数\nexport const calculateRocketScale = (totalHeight, canvasHeight) => {\n  // 画面の70%を使うように計算\n  const targetHeight = canvasHeight * 0.7;\n\n  // スケール係数の計算\n  const scale = targetHeight / totalHeight;\n\n  // 最小・最大スケール値の制限\n  return Math.max(0.5, Math.min(2.0, scale));\n};\n\n// ロケットのSVG位置変換を計算する関数\nexport const getRocketTransform = (totalHeight, canvasWidth, canvasHeight) => {\n  // 動的なスケール計算\n  const scale = calculateRocketScale(totalHeight, canvasHeight);\n\n  // 移動量の計算（キャンバスの中央に配置）\n  const translateX = canvasWidth / 2;\n  const translateY = canvasHeight / 2 - totalHeight * scale / 2;\n  return {\n    translateX,\n    translateY,\n    scale,\n    transform: `translate(${translateX}, ${translateY}) scale(${scale})`\n  };\n};","map":{"version":3,"names":["React","SVG_CONFIG","ANALYSIS_VIEW_CONFIG","getSafeValue","value","defaultValue","undefined","isNaN","isFinite","parsed","parseFloat","getNosePath","config","noseShape","noseHeight","bodyWidth","bodyHeight","console","warn","centerX","height","startX","endX","baseY","topY","controlY","halfWidth","getBodyPath","getLeftFinPath","finHeight","finBaseWidth","finSweepLength","finTipWidth","bodyLeftX","finBottomY","finTopY","tipTopY","tipBottomY","getRightFinPath","bodyRightX","getCenterFinsPath","finThickness","halfThickness","finExtension","Math","max","getCenterFinsPathForAttitude","x","y","params","drawInitialRocket","centerY","rotation","transform","bodyPath","nosePath","leftFinPath","rightFinPath","centerFinsPath","getFinPaths","deflection","deflectionAngle","PI","leftFinTipX","cos","leftFinTipY","sin","leftFinBottomTipX","leftFinBottomTipY","rightFinTipX","rightFinTipY","rightFinBottomTipX","rightFinBottomTipY","leftFin","rightFin","centerFins","getWindArrow","windSpeed","arrowLength","min","abs","textCenter","color","getWindArrowColor","strokeWidth","getWindArrowWidth","headSize","line","head","lineStart","lineEnd","speed","absSpeed","getParachutePath","isOpen","deploymentProgress","rocketLength","selectedParachute","trajectoryScale","baseOffsetDistance","offsetDistance","parachuteX","parachuteY","parachuteSize","parseInt","slice","getParachuteStringPaths","canopyLeftX","canopyRightX","canopyBottomY","canopyCenterX","canopyCenterTopY","metersToSvgX","meters","metersToSvgY","groundLevel","calculateAttitudeDisplayScale","rocketParams","circleRadius","actualRocketHeight","totalHeight","rawScale","error","getWindProfileArrows","baseWindSpeed","profile","showWindArrows","calculateWindSpeedAtHeight","heights","map","maxArrowLength","minArrowLength","direction","textOffsetX","arrowPath","textX","textY","getSafeRotationTransform","safeRotation","safeX","safeY","getActualRocketDimensions","rocketTopY","getDesignViewBox","design","maxFinWidth","horizontalMargin","width","verticalMargin","totalWidth","paddedHeight","paddedWidth","viewBoxAspectRatio","viewBoxWidth","viewBoxHeight","getAnalysisViewBox","calculateRocketScale","canvasHeight","targetHeight","scale","getRocketTransform","canvasWidth","translateX","translateY"],"sources":["/Users/shinoharatsubasa/Documents/RocketSim_New_2d_integ/src/components/rocket/RocketRendering.jsx"],"sourcesContent":["// SVG描画関連の関数\nimport React from 'react';\nimport { SVG_CONFIG, ANALYSIS_VIEW_CONFIG } from './RocketConstants';\n\n// 安全な値を取得するユーティリティ関数 - より強化されたバージョン\nexport const getSafeValue = (value, defaultValue = 0) => {\n  // 値がnull、undefined、NaN、無限大の場合はデフォルト値を返す\n  if (value === null || value === undefined || isNaN(value) || !isFinite(value)) {\n    return defaultValue;\n  }\n  // 数値型でない場合、変換を試みる\n  if (typeof value !== 'number') {\n    const parsed = parseFloat(value);\n    // 変換できなければデフォルト値を返す\n    return isNaN(parsed) ? defaultValue : parsed;\n  }\n  return value;\n};\n\n// SVG描画関数 - 修正版\nexport const getNosePath = (config, noseShape, noseHeight, bodyWidth, bodyHeight) => {\n  // configが有効かどうかを確認\n  if (!config || typeof config !== 'object' || !('centerX' in config) || !('height' in config)) {\n    console.warn('getNosePath: Invalid config object', config);\n    // デフォルト設定を作成\n    config = { centerX: 400, height: 550 };\n  }\n\n  // 各パラメータの安全な取り扱い\n  noseHeight = getSafeValue(noseHeight, 50);\n  bodyWidth = getSafeValue(bodyWidth, 30);\n  bodyHeight = getSafeValue(bodyHeight, 100);\n  \n  const startX = config.centerX - bodyWidth / 2;\n  const endX = config.centerX + bodyWidth / 2;\n  const baseY = config.height - bodyHeight;\n  const topY = baseY - noseHeight;\n  \n  if (noseShape === \"cone\") {\n    // 円錐ノーズ\n    return `M ${startX} ${baseY} L ${config.centerX} ${topY} L ${endX} ${baseY} Z`;\n  } else if (noseShape === \"parabola\") {\n    // 放物線ノーズ\n    const controlY = topY + noseHeight * 0.15;\n    return `M ${startX} ${baseY} \n            C ${startX} ${controlY}, ${config.centerX} ${topY}, ${config.centerX} ${topY}\n            C ${config.centerX} ${topY}, ${endX} ${controlY}, ${endX} ${baseY} Z`;\n  } else {\n    // オジブノーズ\n    const halfWidth = bodyWidth / 2;\n    return `M ${startX} ${baseY}\n            Q ${startX + halfWidth * 0.1} ${topY + noseHeight * 0.4}, ${config.centerX} ${topY}\n            Q ${endX - halfWidth * 0.1} ${topY + noseHeight * 0.4}, ${endX} ${baseY} Z`;\n  }\n};\n\nexport const getBodyPath = (config, bodyHeight, bodyWidth) => {\n  // configが有効かどうかを確認\n  if (!config || typeof config !== 'object' || !('centerX' in config) || !('height' in config)) {\n    console.warn('getBodyPath: Invalid config object', config);\n    // デフォルト設定を作成\n    config = { centerX: 400, height: 550 };\n  }\n\n  bodyHeight = getSafeValue(bodyHeight, 100);\n  bodyWidth = getSafeValue(bodyWidth, 30);\n  \n  const startX = config.centerX - bodyWidth / 2;\n  const endX = config.centerX + bodyWidth / 2;\n  const baseY = config.height;\n  const topY = baseY - bodyHeight;\n\n  return `M ${startX} ${baseY} \n          L ${startX} ${topY} \n          L ${endX} ${topY} \n          L ${endX} ${baseY} Z`;\n};\n\nexport const getLeftFinPath = (config, bodyWidth, finHeight, finBaseWidth, finSweepLength, finTipWidth) => {\n  // configが有効かどうかを確認\n  if (!config || typeof config !== 'object' || !('centerX' in config) || !('height' in config)) {\n    console.warn('getLeftFinPath: Invalid config object', config);\n    // デフォルト設定を作成\n    config = { centerX: 400, height: 550 };\n  }\n\n  // 安全なパラメータ処理\n  bodyWidth = getSafeValue(bodyWidth, 30);\n  finHeight = getSafeValue(finHeight, 40);\n  finBaseWidth = getSafeValue(finBaseWidth, 30);\n  finSweepLength = getSafeValue(finSweepLength, 0);\n  finTipWidth = getSafeValue(finTipWidth, 20);\n  \n  const bodyLeftX = config.centerX - bodyWidth / 2;\n  const finBottomY = config.height;\n  const finTopY = finBottomY - finBaseWidth;\n\n  // フィンの翼端位置を正確に計算\n  const tipTopY = finTopY + finSweepLength;\n  const tipBottomY = tipTopY + finTipWidth;\n\n  return `M ${bodyLeftX} ${finTopY}\n          L ${bodyLeftX} ${finBottomY}\n          L ${bodyLeftX - finHeight} ${tipBottomY}\n          L ${bodyLeftX - finHeight} ${tipTopY} Z`;\n};\n\nexport const getRightFinPath = (config, bodyWidth, finHeight, finBaseWidth, finSweepLength, finTipWidth) => {\n  // configが有効かどうかを確認\n  if (!config || typeof config !== 'object' || !('centerX' in config) || !('height' in config)) {\n    console.warn('getRightFinPath: Invalid config object', config);\n    // デフォルト設定を作成\n    config = { centerX: 400, height: 550 };\n  }\n\n  // 安全なパラメータ処理\n  bodyWidth = getSafeValue(bodyWidth, 30);\n  finHeight = getSafeValue(finHeight, 40);\n  finBaseWidth = getSafeValue(finBaseWidth, 30);\n  finSweepLength = getSafeValue(finSweepLength, 0);\n  finTipWidth = getSafeValue(finTipWidth, 20);\n  \n  const bodyRightX = config.centerX + bodyWidth / 2;\n  const finBottomY = config.height;\n  const finTopY = finBottomY - finBaseWidth;\n\n  // フィンの翼端位置を正確に計算\n  const tipTopY = finTopY + finSweepLength;\n  const tipBottomY = tipTopY + finTipWidth;\n\n  return `M ${bodyRightX} ${finTopY}\n          L ${bodyRightX} ${finBottomY}\n          L ${bodyRightX + finHeight} ${tipBottomY}\n          L ${bodyRightX + finHeight} ${tipTopY} Z`;\n};\n\nexport const getCenterFinsPath = (config, finThickness, finBaseWidth, finSweepLength, finTipWidth) => {\n  // configが有効かどうかを確認\n  if (!config || typeof config !== 'object' || !('centerX' in config) || !('height' in config)) {\n    console.warn('getCenterFinsPath: Invalid config object', config);\n    // デフォルト設定を作成\n    config = { centerX: 400, height: 550 };\n  }\n\n  // 安全なパラメータ処理\n  finThickness = getSafeValue(finThickness, 2);\n  finBaseWidth = getSafeValue(finBaseWidth, 30);\n  finSweepLength = getSafeValue(finSweepLength, 0);\n  finTipWidth = getSafeValue(finTipWidth, 20);\n  \n  const halfThickness = finThickness / 2;\n  const finBottomY = config.height;\n  const finTopY = finBottomY - finBaseWidth;\n\n  // フィンの後端が左右のフィンと揃うように調整\n  const finExtension = Math.max(0, finSweepLength + finTipWidth - finBaseWidth);\n\n  return `M ${config.centerX - halfThickness} ${finTopY}\n          L ${config.centerX - halfThickness} ${finBottomY}\n          L ${config.centerX - halfThickness} ${finBottomY + finExtension}\n          L ${config.centerX + halfThickness} ${finBottomY + finExtension}\n          L ${config.centerX + halfThickness} ${finBottomY}\n          L ${config.centerX + halfThickness} ${finTopY} Z`;\n};\n\n// 姿勢表示用に中央のフィンを描画する関数\nexport const getCenterFinsPathForAttitude = (x, y, params) => {\n  // configが有効かどうかを確認\n  if (!config || typeof config !== 'object' || !('centerX' in config) || !('height' in config)) {\n    console.warn('getCenterFinsPathForAttitude: Invalid config object', config);\n    // デフォルト設定を作成\n    config = { centerX: 400, height: 550 };\n  }\n\n  // 安全なパラメータ処理\n  finThickness = getSafeValue(finThickness, 2);\n  finBaseWidth = getSafeValue(finBaseWidth, 30);\n  finSweepLength = getSafeValue(finSweepLength, 0);\n  finTipWidth = getSafeValue(finTipWidth, 20);\n\n  const halfThickness = params.finThickness / 2;\n  const finBottomY = y;\n  const finTopY = finBottomY - params.finBaseWidth;\n  \n  // フィンの翼端位置を正確に計算\n  const tipTopY = finTopY + params.finSweepLength;\n  const tipBottomY = tipTopY + params.finTipWidth;\n  \n  // フィンの後端が左右のフィンと揃うように調整\n  // フィンの翼端長がボディ後端よりも伸びる場合を計算\n  const finExtension = Math.max(0, params.finSweepLength + params.finTipWidth - params.finBaseWidth);\n  \n  return `M ${x - halfThickness} ${finTopY}\n          L ${x - halfThickness} ${finBottomY}\n          L ${x - halfThickness} ${finBottomY + finExtension}\n          L ${x + halfThickness} ${finBottomY + finExtension}\n          L ${x + halfThickness} ${finBottomY}\n          L ${x + halfThickness} ${finTopY} Z`;\n};\n\n// シミュレーションタブ用のロケット描画関数を追加\nexport const drawInitialRocket = (centerX, centerY, params, rotation) => {\n    // 回転を考慮した変換\n    const transform = `translate(${centerX}, ${centerY}) rotate(${rotation})`;\n    \n    // 各部品のパス計算\n    const bodyPath = `M ${-params.bodyWidth / 2} ${-params.bodyHeight} \n                     L ${-params.bodyWidth / 2} ${0} \n                     L ${params.bodyWidth / 2} ${0} \n                     L ${params.bodyWidth / 2} ${-params.bodyHeight} Z`;\n                     \n    let nosePath;\n    if (params.noseShape === \"cone\") {\n      nosePath = `M ${-params.bodyWidth / 2} ${-params.bodyHeight} \n                  L ${0} ${-params.bodyHeight - params.noseHeight} \n                  L ${params.bodyWidth / 2} ${-params.bodyHeight} Z`;\n    } else if (params.noseShape === \"parabola\") {\n      nosePath = `M ${-params.bodyWidth / 2} ${-params.bodyHeight} \n                  Q ${0} ${-params.bodyHeight - params.noseHeight * 1.2}, \n                    ${params.bodyWidth / 2} ${-params.bodyHeight} Z`;\n    } else { // ogive\n      nosePath = `M ${-params.bodyWidth / 2} ${-params.bodyHeight} \n                  Q ${0} ${-params.bodyHeight - params.noseHeight * 1.1}, \n                    ${params.bodyWidth / 2} ${-params.bodyHeight} Z`;\n    }\n    \n    const leftFinPath = `M ${-params.bodyWidth / 2} ${-params.finBaseWidth} \n                         L ${-params.bodyWidth / 2} ${0} \n                         L ${-params.bodyWidth / 2 - params.finHeight} ${params.finSweepLength} \n                         L ${-params.bodyWidth / 2 - params.finHeight} ${params.finSweepLength - params.finTipWidth} Z`;\n    \n    const rightFinPath = `M ${params.bodyWidth / 2} ${-params.finBaseWidth} \n                          L ${params.bodyWidth / 2} ${0} \n                          L ${params.bodyWidth / 2 + params.finHeight} ${params.finSweepLength} \n                          L ${params.bodyWidth / 2 + params.finHeight} ${params.finSweepLength - params.finTipWidth} Z`;\n    \n    return {\n      transform,\n      bodyPath,\n      nosePath,\n      leftFinPath,\n      rightFinPath,\n      centerFinsPath: `M ${-params.finThickness / 2} ${-params.finBaseWidth} \n                      L ${-params.finThickness / 2} ${0} \n                      L ${params.finThickness / 2} ${0} \n                      L ${params.finThickness / 2} ${-params.finBaseWidth} Z`\n    };\n  };\n\n// フィンを取得する総合的な関数\nexport const getFinPaths = (x, y, params, deflection = 0) => {\n  const bodyLeftX = x - params.bodyWidth / 2;\n  const bodyRightX = x + params.bodyWidth / 2;\n  const finBottomY = y;\n  const finTopY = finBottomY - params.finBaseWidth;\n  \n  // たわみを考慮した修正\n  const deflectionAngle = deflection * Math.PI / 180; // ラジアンに変換\n  \n  // 翼端長がボディ後端より後ろに出るように調整\n  const tipTopY = finTopY + params.finSweepLength;\n  const tipBottomY = tipTopY + params.finTipWidth;\n  \n  // たわみを適用したフィン座標\n  const leftFinTipX = bodyLeftX - params.finHeight * Math.cos(deflectionAngle);\n  const leftFinTipY = tipTopY + params.finHeight * Math.sin(deflectionAngle);\n  const leftFinBottomTipX = bodyLeftX - params.finHeight * Math.cos(deflectionAngle);\n  const leftFinBottomTipY = tipBottomY + params.finHeight * Math.sin(deflectionAngle);\n  \n  const rightFinTipX = bodyRightX + params.finHeight * Math.cos(deflectionAngle);\n  const rightFinTipY = tipTopY + params.finHeight * Math.sin(deflectionAngle);\n  const rightFinBottomTipX = bodyRightX + params.finHeight * Math.cos(deflectionAngle);\n  const rightFinBottomTipY = tipBottomY + params.finHeight * Math.sin(deflectionAngle);\n\n  const leftFin = `M ${bodyLeftX} ${finTopY}\n                  L ${bodyLeftX} ${finBottomY}\n                  L ${leftFinBottomTipX} ${leftFinBottomTipY}\n                  L ${leftFinTipX} ${leftFinTipY} Z`;\n\n  const rightFin = `M ${bodyRightX} ${finTopY}\n                  L ${bodyRightX} ${finBottomY}\n                  L ${rightFinBottomTipX} ${rightFinBottomTipY}\n                  L ${rightFinTipX} ${rightFinTipY} Z`;\n\n  const halfThickness = params.finThickness / 2;\n  const centerFins = `M ${x - halfThickness} ${finTopY}\n                    L ${x - halfThickness} ${finBottomY}\n                    L ${x + halfThickness} ${finBottomY}\n                    L ${x + halfThickness} ${finTopY} Z`;\n\n  return { leftFin, rightFin, centerFins };\n};\n\n// 風向き矢印の描画関数\nexport const getWindArrow = (windSpeed) => {\n  if (windSpeed === 0) return null;\n  \n  // 風速に基づいた矢印の長さ\n  const arrowLength = Math.min(100, Math.max(40, Math.abs(windSpeed) * 10));\n  \n  // 「風速: X m/s」テキストの中央位置\n  const textCenter = 85; // テキスト中央のx座標\n  const y = 50; // テキスト下のy座標\n  \n  // 矢印の色と太さを取得\n  const color = getWindArrowColor(windSpeed);\n  const strokeWidth = getWindArrowWidth(windSpeed);\n  \n  // 矢印の頭の大きさ\n  const headSize = 15;\n  \n  // 風速の符号で場合分け\n  if (windSpeed < 0) {\n    // マイナスの場合 - 右向き矢印\n    const startX = textCenter - arrowLength / 2;\n    const endX = textCenter + arrowLength / 2;\n    \n    return {\n      line: `M ${startX} ${y} L ${endX} ${y}`,\n      head: `M ${endX - headSize} ${y - headSize/2} L ${endX} ${y} L ${endX - headSize} ${y + headSize/2}`,\n      y: y,\n      color: color,\n      strokeWidth: strokeWidth\n    };\n  } else {\n    // プラスの場合 - 左向き矢印だが、矢じりは右端\n    const lineStart = textCenter - arrowLength / 2;\n    const lineEnd = textCenter + arrowLength / 2;\n    \n    return {\n      line: `M ${lineStart} ${y} L ${lineEnd} ${y}`,\n      head: `M ${lineStart + headSize} ${y - headSize/2} L ${lineStart} ${y} L ${lineStart + headSize} ${y + headSize/2}`,\n      y: y,\n      color: color,\n      strokeWidth: strokeWidth\n    };\n  }\n};\n\n// 風速に応じた矢印の色を取得する関数\nexport const getWindArrowColor = (speed) => {\n  const absSpeed = Math.abs(speed);\n  if (absSpeed >= 6) return \"#e74c3c\"; // 強風: 赤色\n  if (absSpeed >= 3) return \"#f39c12\"; // 中風: オレンジ/黄色\n  return \"#2ecc71\"; // 弱風: 緑色\n};\n\n// 風速に応じた矢印の線の太さを取得する関数\nexport const getWindArrowWidth = (speed) => {\n  const absSpeed = Math.abs(speed);\n  if (absSpeed >= 6) return 5; // 強風: より太い線\n  if (absSpeed >= 3) return 4; // 中風: やや太い線\n  return 3; // 弱風: 通常の線\n};\n\n// パラシュート表示を改良\nexport const getParachutePath = (x, y, isOpen, deploymentProgress = 1.0, rotation = 0, rocketLength, selectedParachute, trajectoryScale) => {\n  if (!isOpen) return \"\";\n\n  // ロケットの長さを基準に計算\n  // 基準距離を短くして調整（1.5倍にする）\n  const baseOffsetDistance = rocketLength * 1.5; \n  const offsetDistance = baseOffsetDistance * trajectoryScale * deploymentProgress;\n\n  // 機体の上部に常に配置するため、回転角度を無視\n  // xは変更せず、yだけ上方向に移動\n  const parachuteX = x;\n  const parachuteY = y - offsetDistance;\n\n  // パラシュートサイズの計算\n  const parachuteSize = (parseInt(selectedParachute.slice(1)) / 1000 / 2) * trajectoryScale * deploymentProgress;\n\n  // パラシュートのパスを描画\n  return `M ${parachuteX - parachuteSize} ${parachuteY}\n          C ${parachuteX - parachuteSize} ${parachuteY - parachuteSize * 0.8},\n            ${parachuteX} ${parachuteY - parachuteSize * 1.2},\n            ${parachuteX + parachuteSize} ${parachuteY - parachuteSize * 0.8}\n          C ${parachuteX + parachuteSize} ${parachuteY - parachuteSize * 0.8},\n            ${parachuteX + parachuteSize} ${parachuteY},\n            ${parachuteX + parachuteSize} ${parachuteY}\n          Z`;\n};\n\n// パラシュートの紐を描画\nexport const getParachuteStringPaths = (x, y, isOpen, deploymentProgress = 1.0, rotation = 0, rocketLength, selectedParachute, trajectoryScale) => {\n  if (!isOpen) return '';\n\n  // パラシュート本体と全く同じ計算を使用して一貫性を確保\n  const baseOffsetDistance = rocketLength * 1.5; \n  const offsetDistance = baseOffsetDistance * trajectoryScale * deploymentProgress;\n\n  // 機体の上部に常に配置\n  const parachuteX = x;\n  const parachuteY = y - offsetDistance;\n\n  // パラシュートサイズも同一の計算で\n  const parachuteSize = (parseInt(selectedParachute.slice(1)) / 1000 / 2) * trajectoryScale * deploymentProgress;\n\n  // キャノピーの各部分の座標を計算\n  const canopyLeftX = parachuteX - parachuteSize;\n  const canopyRightX = parachuteX + parachuteSize;\n  const canopyBottomY = parachuteY;\n  const canopyCenterX = parachuteX;\n  const canopyCenterTopY = parachuteY - parachuteSize * 0.5;\n\n  // 紐のパスを描画 - ロケット位置からキャノピーの各点まで\n  return `M ${x} ${y} L ${canopyLeftX} ${canopyBottomY}\n          M ${x} ${y} L ${canopyCenterX} ${canopyCenterTopY}\n          M ${x} ${y} L ${canopyRightX} ${canopyBottomY}`;\n};\n\n// メートル単位からSVG座標への変換関数\nexport const metersToSvgX = (meters, trajectoryScale) => {\n  // NaNチェック追加\n  if (isNaN(meters)) {\n    console.warn('metersToSvgX: 無効なメートル値', meters);\n    return SVG_CONFIG.centerX;\n  }\n  \n  // trajectoryScaleが数値でない場合のフォールバック\n  if (typeof trajectoryScale !== 'number' || isNaN(trajectoryScale) || trajectoryScale <= 0) {\n    console.warn('metersToSvgX: 無効なtrajectoryScale', trajectoryScale);\n    trajectoryScale = 10.0; // より安全なデフォルト値\n  }\n  \n  return SVG_CONFIG.centerX + meters * trajectoryScale;\n};\n\nexport const metersToSvgY = (meters, trajectoryScale) => {\n  // NaNチェック\n  if (isNaN(meters)) {\n    console.warn('metersToSvgY: 無効なメートル値', meters);\n    return SVG_CONFIG.groundLevel;\n  }\n  \n  // trajectoryScaleが数値でない場合のフォールバック\n  if (typeof trajectoryScale !== 'number' || isNaN(trajectoryScale) || trajectoryScale <= 0) {\n    console.warn('metersToSvgY: 無効なtrajectoryScale', trajectoryScale);\n    trajectoryScale = 10.0; // より安全なデフォルト値\n  }\n  \n  return SVG_CONFIG.groundLevel - meters * trajectoryScale;\n};\n\n// 姿勢表示用のロケットスケールを自動計算する関数を追加\nexport const calculateAttitudeDisplayScale = (rocketParams, circleRadius = 90) => {\n  try {\n    // 必要なパラメータを安全に取得\n    const noseHeight = getSafeValue(rocketParams.noseHeight, 50);\n    const bodyHeight = getSafeValue(rocketParams.bodyHeight, 200);\n    const finSweepLength = getSafeValue(rocketParams.finSweepLength, 0);\n    const finTipWidth = getSafeValue(rocketParams.finTipWidth, 20);\n    const finBaseWidth = getSafeValue(rocketParams.finBaseWidth, 30);\n    \n    // ロケットの寸法を計算\n    const actualRocketHeight = noseHeight + bodyHeight;\n    const finExtension = Math.max(0, finSweepLength + finTipWidth - finBaseWidth);\n    const totalHeight = actualRocketHeight + finExtension;\n    \n    // スケール計算 - 安全範囲内に制限\n    const rawScale = (circleRadius * 1.6) / Math.max(50, totalHeight);\n    return Math.max(0.01, Math.min(2.0, rawScale));\n  } catch (error) {\n    console.error('calculateAttitudeDisplayScale エラー:', error);\n    return 0.3; // エラー時のデフォルト値\n  }\n};\n\n// 視覚化のための風速高度分布矢印を描画する関数\nexport const getWindProfileArrows = (baseWindSpeed, profile, showWindArrows, metersToSvgY, calculateWindSpeedAtHeight) => {\n  if (!showWindArrows) return [];\n  \n  // 表示する高度レベル（メートル）\n  const heights = [0, 20, 40, 60, 80];\n  \n  return heights.map(height => {\n    // 各高度での風速を計算\n    const windSpeed = calculateWindSpeedAtHeight(baseWindSpeed, height, profile);\n    \n    // SVG座標に変換\n    const y = metersToSvgY(height);\n    \n    // 風速によって矢印の長さを制限して表示範囲内に収める\n    // 最大長さをより小さく設定し、範囲内に確実に収める\n    const maxArrowLength = 60; // 最大長さを短くして確実に範囲内に収める\n    const minArrowLength = 20; // 最小長さ\n    const arrowLength = Math.min(maxArrowLength, Math.max(minArrowLength, Math.abs(windSpeed) * 6));\n    \n    const color = getWindArrowColor(windSpeed);\n    const strokeWidth = getWindArrowWidth(windSpeed);\n    \n    // 表示位置の調整 - 右に寄せて表示するように修正\n    const startX = 80; // 右寄りに配置\n    // 矢印の向きを修正 - 既存の風向き矢印と同じロジック\n    const direction = windSpeed < 0 ? 1 : -1;  // 負の風速で右向き、正の風速で左向き\n    \n    // 矢印の端点の位置を計算\n    const endX = startX + arrowLength * direction;\n    \n    // テキスト位置の調整\n    // 矢印の長さと方向に応じてテキスト位置を調整し、矢印から適切な距離に配置\n    const textOffsetX = direction > 0 ? 12 : -35; // テキストのオフセット\n    \n    return {\n      height,\n      windSpeed,\n      y,\n      arrowPath: {\n        // 矢印の線\n        line: `M ${startX} ${y} L ${endX} ${y}`,\n        // 矢印の頭\n        head: direction > 0 \n          ? `M ${endX - 10} ${y - 5} L ${endX} ${y} L ${endX - 10} ${y + 5}`\n          : `M ${endX + 10} ${y - 5} L ${endX} ${y} L ${endX + 10} ${y + 5}`,\n        // 風速テキスト - 常に表示範囲内に収まるように位置調整\n        textX: endX + textOffsetX,\n        textY: y,\n        color,\n        strokeWidth\n      }\n    };\n  });\n};\n\n// 安全な回転属性を生成する関数\nexport const getSafeRotationTransform = (rotation, x, y) => {\n  // 全ての値にNaNチェック\n  const safeRotation = isNaN(rotation) ? 0 : rotation;\n  const safeX = isNaN(x) ? SVG_CONFIG.centerX : x;\n  const safeY = isNaN(y) ? SVG_CONFIG.groundLevel : y;\n\n  return `rotate(${safeRotation} ${safeX} ${safeY})`;\n};\n\n// ロケット寸法計算関数\nexport const getActualRocketDimensions = (config, noseHeight, bodyHeight, finSweepLength, finTipWidth, finBaseWidth) => {\n  const rocketTopY = config.height - bodyHeight - noseHeight;\n  // 機体全長の計算 - ノーズとボディの高さ\n  const actualRocketHeight = noseHeight + bodyHeight;\n  // フィンの後端がボディ後端よりも出る場合の計算\n  const finExtension = Math.max(0, finSweepLength + finTipWidth - finBaseWidth);\n  // 全長は機体長 + フィン後端部分\n  const totalHeight = actualRocketHeight + finExtension;\n\n  return { rocketTopY, actualRocketHeight, totalHeight };\n};\n\n// 設計タブ用のviewBox計算関数\nexport const getDesignViewBox = (design, noseHeight, bodyHeight, finHeight, finSweepLength, finTipWidth, finBaseWidth, bodyWidth) => {\n  // 直接ロケット寸法を計算\n  const rocketTopY = design.height - bodyHeight - noseHeight;\n  const actualRocketHeight = noseHeight + bodyHeight;\n  const finExtension = Math.max(0, finSweepLength + finTipWidth - finBaseWidth);\n  const totalHeight = actualRocketHeight + finExtension;\n  \n  // フィンの左右の最大幅を計算\n  const maxFinWidth = finHeight;\n\n  // 左右のマージンを追加 - より広いマージンを確保\n  const horizontalMargin = Math.max(maxFinWidth + 20, design.width * 0.25);\n  \n  // 垂直方向のマージンを追加 - 新規追加\n  const verticalMargin = Math.max(totalHeight * 0.2, 50);\n  \n  // 全幅 (ボディ幅 + 左右のフィン)\n  const totalWidth = bodyWidth + (maxFinWidth * 2);\n  \n  // 余裕を持たせた表示エリアのサイズ - 余裕を増やす\n  const paddedHeight = totalHeight * 1.4; // 40%の余裕に増加\n  const paddedWidth = totalWidth * 1.4;  // 40%の余裕に増加\n  \n  // 表示エリアのアスペクト比\n  const viewBoxAspectRatio = design.width / design.height;\n  \n  // ロケットのアスペクト比と比較して表示方法を決定\n  let viewBoxWidth, viewBoxHeight;\n  \n  if (paddedWidth / paddedHeight > viewBoxAspectRatio) {\n    // 幅が制限要素の場合\n    viewBoxWidth = paddedWidth;\n    viewBoxHeight = paddedWidth / viewBoxAspectRatio;\n  } else {\n    // 高さが制限要素の場合\n    viewBoxHeight = paddedHeight;\n    viewBoxWidth = paddedHeight * viewBoxAspectRatio;\n  }\n  \n  // 表示領域を計算 - 上部に余裕を持たせるように変更\n  return `-${horizontalMargin} -${verticalMargin} ${design.width + horizontalMargin * 2} ${design.height + verticalMargin * 2}`;\n};\n\n// 重量・空力特性タブ用のviewBox計算関数（改善版）\nexport const getAnalysisViewBox = () => {\n    // ロケットが確実に中央に表示されるようなviewBox\n    return \"-200 -400 400 800\";\n  };\n\n// ロケットの拡大率を計算する関数\nexport const calculateRocketScale = (totalHeight, canvasHeight) => {\n  // 画面の70%を使うように計算\n  const targetHeight = canvasHeight * 0.7;\n  \n  // スケール係数の計算\n  const scale = targetHeight / totalHeight;\n  \n  // 最小・最大スケール値の制限\n  return Math.max(0.5, Math.min(2.0, scale));\n};\n\n// ロケットのSVG位置変換を計算する関数\nexport const getRocketTransform = (totalHeight, canvasWidth, canvasHeight) => {\n  // 動的なスケール計算\n  const scale = calculateRocketScale(totalHeight, canvasHeight);\n  \n  // 移動量の計算（キャンバスの中央に配置）\n  const translateX = canvasWidth / 2;\n  const translateY = canvasHeight / 2 - (totalHeight * scale / 2);\n  \n  return {\n    translateX,\n    translateY,\n    scale,\n    transform: `translate(${translateX}, ${translateY}) scale(${scale})`\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}