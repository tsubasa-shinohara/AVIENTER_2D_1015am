{"ast":null,"code":"// 物理計算関連の関数\nimport { MOTOR_THRUST_DATA, PHYSICAL_CONSTANTS, ANGLE_RESPONSE_DT, ANGLE_STEPS_PER_UPDATE, NOSE_SHAPES, FIN_MATERIALS, mmToM, gToKg } from './RocketConstants';\n\n// ロケットの投影面積を計算する関数\nexport const calculateProjectedArea = rocketParams => {\n  const {\n    noseShape,\n    noseHeight,\n    bodyHeight,\n    bodyWidth,\n    finHeight,\n    finBaseWidth,\n    finTipWidth,\n    finSweepLength,\n    finThickness\n  } = rocketParams;\n\n  // 単位をmm->mに変換\n  const noseHeight_m = mmToM(noseHeight);\n  const bodyHeight_m = mmToM(bodyHeight);\n  const bodyWidth_m = mmToM(bodyWidth);\n  const bodyRadius_m = bodyWidth_m / 2;\n  const finHeight_m = mmToM(finHeight);\n  const finBaseWidth_m = mmToM(finBaseWidth);\n  const finTipWidth_m = mmToM(finTipWidth);\n  const finSweepLength_m = mmToM(finSweepLength);\n\n  // 正面からの投影面積 (m^2)\n  const frontalArea = Math.PI * Math.pow(bodyRadius_m, 2) + finHeight * finThickness * 4 * 0.0000001;\n\n  // 側面投影面積の計算 (m^2)\n  // ボディ部分\n  const bodyArea = bodyWidth_m * bodyHeight_m;\n\n  // ノーズ部分 - 形状に応じて計算\n  let noseArea;\n  if (noseShape === 'cone') {\n    noseArea = 0.5 * bodyWidth_m * noseHeight_m; // 三角形の面積\n  } else if (noseShape === 'parabola') {\n    noseArea = 2 / 3 * bodyWidth_m * noseHeight_m; // 放物線の近似\n  } else {\n    // ogive\n    noseArea = 2 / 3 * bodyWidth_m * noseHeight_m; // オジブの近似\n  }\n\n  // フィン1枚あたりの投影面積\n  const finArea = finHeight_m * (finBaseWidth_m + finTipWidth_m) / 2; // 台形の面積\n\n  // フィン4枚の合計投影面積\n  const totalFinArea = finArea * 2;\n\n  // 側面からの合計投影面積\n  const sideArea = bodyArea + noseArea + totalFinArea;\n\n  // 斜め45度からの投影面積（近似）（修正が必要）\n  const angledArea = Math.sqrt(Math.pow(frontalArea, 2) + Math.pow(sideArea, 2));\n  return {\n    frontalArea,\n    // 正面からの投影面積 (m^2)\n    sideArea,\n    // 側面からの投影面積 (m^2)\n    finArea,\n    // フィン1枚の投影面積 (m^2)\n    totalFinArea,\n    // フィン4枚の合計投影面積 (m^2)\n    angledArea // 斜め45度からの投影面積（近似） (m^2)\n  };\n};\n\n// ロケットの体積を計算する関数\nexport const calculateVolume = rocketParams => {\n  const {\n    noseShape,\n    noseHeight,\n    bodyHeight,\n    bodyWidth\n  } = rocketParams;\n\n  // 単位をmm->mに変換\n  const noseHeight_m = mmToM(noseHeight);\n  const bodyHeight_m = mmToM(bodyHeight);\n  const bodyRadius_m = mmToM(bodyWidth) / 2;\n\n  // ボディ体積（円柱） (m^3)\n  const bodyVolume = Math.PI * Math.pow(bodyRadius_m, 2) * bodyHeight_m;\n\n  // ノーズ体積 - 形状に応じて計算 (m^3)\n  let noseVolume;\n  if (noseShape === 'cone') {\n    noseVolume = 1 / 3 * Math.PI * Math.pow(bodyRadius_m, 2) * noseHeight_m; // 円錐の体積\n  } else if (noseShape === 'parabola') {\n    noseVolume = 1 / 2 * Math.PI * Math.pow(bodyRadius_m, 2) * noseHeight_m; // 放物線回転体の体積\n  } else {\n    // ogive\n    noseVolume = 2 / 3 * Math.PI * Math.pow(bodyRadius_m, 2) * noseHeight_m; // オジブの近似体積\n  }\n\n  // 合計体積 (m^3)\n  const totalVolume = bodyVolume + noseVolume;\n  return {\n    bodyVolume,\n    // ボディ部分の体積 (m^3)\n    noseVolume,\n    // ノーズ部分の体積 (m^3)\n    totalVolume // 合計体積 (m^3)\n  };\n};\n\n// 圧力中心位置を計算する関数（モーメント計算に使用）\nexport const calculateCenterOfPressure = rocketParams => {\n  const {\n    noseShape,\n    noseHeight,\n    bodyHeight,\n    bodyWidth,\n    finHeight,\n    finBaseWidth,\n    finTipWidth,\n    finSweepLength\n  } = rocketParams;\n\n  // 面積と体積を計算\n  const areas = calculateProjectedArea(rocketParams);\n\n  // ノーズ先端からの各コンポーネントの圧力中心位置 (mm)\n  // ノーズの圧力中心位置 - 形状に応じて計算\n  let noseCp;\n  if (noseShape === 'cone') {\n    noseCp = noseHeight * (2 / 3); // 円錐の圧力中心はノーズ長の2/3\n  } else if (noseShape === 'parabola') {\n    noseCp = noseHeight * (3 / 5); // 放物線の圧力中心（近似値）\n  } else {\n    // ogive\n    noseCp = noseHeight * (3 / 5); // オジブの圧力中心（近似値）\n  }\n\n  // ボディの圧力中心位置（ノーズ先端から）\n  const bodyCp = noseHeight + bodyHeight / 2; // mm\n\n  //　フィンの圧力中心位置（フィン付け根先端から）\n  const finCP_single = (Math.pow(finSweepLength + finTipWidth, 2) - Math.pow(finSweepLength, 2) + Math.pow(finBaseWidth, 2) + (finSweepLength + finTipWidth) * finBaseWidth) / (3 * (finSweepLength + finTipWidth + finBaseWidth - finSweepLength)); // mm\n\n  // フィンの圧力中心位置（ノーズ先端から）\n  const finCp = noseHeight + bodyHeight - finBaseWidth + finCP_single; // mm\n\n  // 面積による重み付け計算\n  // 単位を揃えるためにm²からmm²に変換\n  const noseArea = areas.noseArea * 1000000; // m^2 → mm^2\n  const bodyArea = areas.sideArea * 1000000 - noseArea; // m^2 → mm^2\n  const totalFinArea = areas.totalFinArea * 1000000; // m^2 → mm^2\n\n  // 圧力中心の計算（重み付け平均）\n  const totalArea = noseArea + bodyArea + totalFinArea;\n  const centerOfPressure = (noseCp * noseArea + bodyCp * bodyArea + finCp * totalFinArea) / totalArea; // mm\n\n  // フィンを除いた前部の圧力中心（空力計算用）\n  const foreBodyArea = noseArea + bodyArea;\n  const foreBodyCp = (noseCp * noseArea + bodyCp * bodyArea) / foreBodyArea;\n  return {\n    noseCp,\n    // ノーズの圧力中心位置 (mm)\n    bodyCp,\n    // ボディの圧力中心位置 (mm)\n    finCp,\n    // フィンの圧力中心位置 (mm)\n    centerOfPressure,\n    // 全体の圧力中心位置 (mm)\n    foreBodyCp // フィンを除いた前部の圧力中心位置 (mm)\n  };\n};\n\n// 空力中心位置を計算する関数\nexport const calculateAerodynamicCenter = rocketParams => {\n  // この行で必要なすべてのプロパティを取り出します\n  const {\n    noseHeight,\n    bodyHeight,\n    bodyWidth,\n    finHeight,\n    finBaseWidth,\n    finTipWidth,\n    finSweepLength\n  } = rocketParams;\n\n  // 投影面積を計算\n  const areas = calculateProjectedArea(rocketParams);\n\n  // lengthOfCo\n  const lengthOfCo = (finBaseWidth - finTipWidth) / finHeight * (bodyWidth / 2 + finHeight) + finTipWidth;\n\n  // テーパー比（ramda）\n  const ramda = finTipWidth / lengthOfCo;\n\n  // 胴体容積 (m^3)\n  const volumeData = calculateVolume(rocketParams);\n\n  // c_bar\n  const c_bar = 2 * lengthOfCo / 3 * (1 + ramda + Math.pow(ramda, 2)) / (1 + ramda);\n\n  // y_bar\n  const y_bar = (finHeight + bodyWidth / 2) * (1 + 2 * ramda) / (3 * (1 + ramda));\n\n  // 面積による重み付け計算（m^2をmm^2に変換）\n  const noseArea = areas.noseArea * 1000000; // m^2 → mm^2\n  const bodyArea = areas.sideArea * 1000000 - noseArea; // m^2 → mm^2\n  const totalFinArea = areas.totalFinArea * 1000000; // m^2 → mm^2\n\n  // WingArea\n  const wingArea = (finTipWidth + lengthOfCo) * (bodyWidth / 2 + finHeight);\n\n  // V*fus\n  const Vstar_fus = volumeData.totalVolume * 1000000000 / (c_bar * wingArea); // 単位を合わせる\n\n  // AspectRatio\n  const aspectRatio = (2 * finHeight + bodyWidth) * (2 * finHeight + bodyWidth) / wingArea;\n\n  // CLα\n  const cl_alpha = 3.14 * aspectRatio * 0.5 * Math.pow(1 - Math.pow(bodyWidth / 2 / ((finHeight + bodyWidth / 2) / 2), 2), 2);\n\n  // hn\n  const hn = 0.25 + 1 / cl_alpha * -1 * (2 * Vstar_fus);\n\n  // hnwc_bar\n  const hnwc_bar = hn * c_bar;\n\n  // x1\n  const x1 = bodyWidth / 2 * finSweepLength / finHeight;\n\n  // x2\n  const x2 = y_bar * (x1 + finSweepLength + finTipWidth - lengthOfCo) / (bodyWidth / 2 + finHeight);\n\n  // small_xac\n  const small_xac = c_bar - x2 - hnwc_bar;\n\n  // 空力中心計算\n  const aerodynamicCenter = noseHeight + bodyHeight - small_xac;\n  return {\n    aerodynamicCenter // 空力中心位置 (mm)\n  };\n};\n\n// 静安定マージン計算用の圧力中心位置を計算する関数\nexport const calculateStabilityCenterOfPressure = rocketParams => {\n  const {\n    noseShape,\n    noseHeight,\n    bodyHeight,\n    bodyWidth,\n    finHeight,\n    finBaseWidth,\n    finTipWidth,\n    finSweepLength\n  } = rocketParams;\n\n  // mc\n  const mc = Math.pow(Math.pow(finSweepLength + finTipWidth / 2 - finBaseWidth / 2, 2) + Math.pow(finHeight, 2), 0.5);\n\n  // ノーズ先端からの位置を計算 (mm)\n  // この静安定マージン用の圧力中心は通常の圧力中心とは異なる計算方法を使用\n\n  // ノーズの圧力中心\n  let noseStabilityCp;\n  if (noseShape === 'cone') {\n    noseStabilityCp = noseHeight * 0.5; // 円錐の静安定用圧力中心\n  } else if (noseShape === 'parabola') {\n    noseStabilityCp = noseHeight * 0.45; // 放物線の静安定用圧力中心\n  } else {\n    // ogive\n    noseStabilityCp = noseHeight * 0.4; // オジブの静安定用圧力中心\n  }\n\n  // フィンのcn\n  const fin_cn_1 = 1 + finHeight / (finHeight + bodyWidth / 2);\n  const fin_cn_2 = 4 * 4 * Math.pow(finHeight / (bodyWidth / 2), 2);\n  const fin_cn_3 = 1 + Math.pow(1 + Math.pow(2 * mc / (finTipWidth + finBaseWidth), 2), 0.5);\n  const fin_cn = fin_cn_1 * fin_cn_2 / fin_cn_3;\n\n  // CnTotal\n  const cnTotal = 2 + fin_cn;\n\n  // フィンの圧力中心\n  const finStabilityCp = noseHeight + bodyHeight - finBaseWidth + finSweepLength / 3 * ((finBaseWidth + 2 * finTipWidth) / (finBaseWidth + finTipWidth)) + (finBaseWidth + finTipWidth - finBaseWidth * finTipWidth / (finBaseWidth + finTipWidth)) / 6;\n\n  // 静安定用の圧力中心位置（重み付け平均）\n  const stabilityCenterOfPressure = (2 * noseStabilityCp + fin_cn * finStabilityCp) / cnTotal;\n  return {\n    stabilityCenterOfPressure // 静安定計算用の圧力中心位置 (mm)\n  };\n};\n\n// 静安定マージンを計算する関数\nexport const calculateStaticMargin = rocketParams => {\n  const {\n    centerOfGravity,\n    bodyWidth\n  } = rocketParams;\n\n  // 通常の圧力中心を計算\n  const cpData = calculateCenterOfPressure(rocketParams);\n\n  // 静安定計算用の特別な圧力中心を計算\n  const stabilityCp = calculateStabilityCenterOfPressure(rocketParams);\n\n  // 静安定マージン = (圧力中心位置 - 重心位置) / ボディ直径\n  // 通常の圧力中心を使用した場合\n  const standardStaticMargin = (cpData.centerOfPressure - centerOfGravity) / bodyWidth;\n\n  // 静安定用圧力中心を使用した場合\n  const stabilityStaticMargin = (stabilityCp.stabilityCenterOfPressure - centerOfGravity) / bodyWidth;\n  return {\n    standardStaticMargin,\n    // 通常の静安定マージン\n    stabilityStaticMargin // 静安定計算用の静安定マージン\n  };\n};\n\n// フィンダイバージェンス速度を計算する関数\nexport const calculateFinDivergenceSpeed = rocketParams => {\n  const {\n    finHeight,\n    finBaseWidth,\n    finTipWidth,\n    finSweepLength,\n    finThickness,\n    finMaterial\n  } = rocketParams;\n\n  // 単位をmmからmに変換\n  const finHeight_m = mmToM(finHeight);\n  const finBaseWidth_m = mmToM(finBaseWidth);\n  const finTipWidth_m = mmToM(finTipWidth);\n  const finSweepLength_m = mmToM(finSweepLength);\n  const finThickness_m = mmToM(finThickness);\n\n  // フィン材料の特性を取得\n  const material = FIN_MATERIALS[finMaterial];\n  const G = material.G; // 横弾性係数 (Pa)\n\n  // 空気密度 (kg/m³)\n  const rho = 1.225;\n\n  // 平均コード長の計算 (m)\n  const meanChord = (finBaseWidth_m + finTipWidth_m) / 2;\n\n  // 後退角(rad)\n  const sweepbackAngle = Math.atan((finSweepLength_m + 0.5 * finTipWidth_m - 0.5 * finBaseWidth_m) * 3.14 / meanChord);\n\n  // 捻り定数J\n  const J = 0.3333 * finTipWidth_m * Math.pow(finThickness_m, 3);\n\n  // 揚力傾斜a0\n  const liftCoefficient_fin = 9 / 3.14 * Math.cos(sweepbackAngle);\n  const divSpeed = 3.14 / (2 * finHeight_m) * Math.pow(2 * G * J / (rho * Math.pow(meanChord, 2) * 0.25 * liftCoefficient_fin), 0.5);\n\n  // 現実的な範囲内に制限（極端に大きな/小さな値を防止）\n  return Math.max(20, Math.min(300, divSpeed));\n};\n\n// フィンフラッター速度を計算する関数\nexport const calculateFinFlutterSpeed = rocketParams => {\n  const {\n    finHeight,\n    finBaseWidth,\n    finTipWidth,\n    finThickness,\n    finMaterial\n  } = rocketParams;\n\n  // 単位をmmからmに変換\n  const finHeight_m = mmToM(finHeight);\n  const finBaseWidth_m = mmToM(finBaseWidth);\n  const finTipWidth_m = mmToM(finTipWidth);\n  const finThickness_m = mmToM(finThickness);\n\n  // フィン材料の特性を取得\n  const material = FIN_MATERIALS[finMaterial];\n  const G = material.G; // 横弾性係数 (Pa)\n  const E = material.E; // 縦弾性係数 (Pa)\n\n  // ポアソン比（一般的な値）\n  const poissonsRatio = 0.3;\n\n  // 空気密度 (kg/m³)\n  const rho = 1.225;\n\n  // 平均コード長の計算 (m)\n  const meanChord = (finBaseWidth_m + finTipWidth_m) / 2;\n\n  // 経験的定数\n  const empiricalConstant = 3.5;\n\n  // フィンフラッター速度の計算 (m/s)\n  // V_flutter = (a * t / c^1.5) * sqrt(G * E / (12 * ρ * (1 - ν^2)))\n  const factorA = empiricalConstant * finThickness_m / Math.pow(meanChord, 1.5);\n  const factorB = Math.sqrt(G * E / (12 * rho * (1 - Math.pow(poissonsRatio, 2))));\n\n  // 計算結果が無効な場合のフォールバック\n  if (!isFinite(factorA) || !isFinite(factorB)) {\n    console.warn('フィンフラッター速度の計算に無効な値が発生しました。代替値を使用します。');\n    return 40 + mmToM(rocketParams.bodyHeight + rocketParams.noseHeight) * 120;\n  }\n  const flutterSpeed = factorA * factorB;\n\n  // 現実的な範囲内に制限（極端に大きな/小さな値を防止）\n  return Math.max(30, Math.min(400, flutterSpeed));\n};\n\n// フィンたわみ量のフォーマット関数（UI表示時に使用）\nexport const formatFinDeflection = deflection => {\n  // 15mmの場合（閾値または計算エラー）は「15mm以上」と表示\n  if (deflection === 15) {\n    return \"15mm以上\";\n  }\n\n  // 通常のたわみ量は小数点2桁までの数値を表示\n  return `${deflection.toFixed(2)}mm`;\n};\n\n// フィンダイバージェンス速度とフラッター速度の表示用フォーマット関数\nexport const formatSpeedValue = (speed, limit = 300) => {\n  // 速度値が上限を超えている場合\n  if (speed >= limit) {\n    return `${limit}+ m/s`; // 「300+ m/s」のように表示\n  }\n\n  // 通常範囲内の速度は整数で表示\n  return `${Math.round(speed)} m/s`;\n};\n\n// 高度に応じた風速を計算する関数 - 基準高度を1.5mに修正\nexport const calculateWindSpeedAtHeight = (baseWindSpeed, height, profile) => {\n  // 高度が0の場合はそのまま基準風速を返す\n  if (height <= 0) return baseWindSpeed;\n\n  // プロファイルに応じたべき指数を取得\n  const alpha = WIND_PROFILES[profile].alpha;\n\n  // べき指数が0の場合は高度に関わらず一定風速\n  if (alpha === 0) return baseWindSpeed;\n\n  // 基準高度（1.5メートル - 地上計測を想定）\n  const referenceHeight = 1.5;\n\n  // べき乗則による風速計算\n  // V(h) = V_ref * (h/h_ref)^α\n  const heightRatio = height / referenceHeight;\n  const windSpeedMultiplier = Math.pow(heightRatio, alpha);\n\n  // 風速の上限を設定（非現実的な値にならないよう制限）\n  const maxMultiplier = 3.0; // 基準風速の3倍まで\n  const actualMultiplier = Math.min(windSpeedMultiplier, maxMultiplier);\n  return baseWindSpeed * actualMultiplier;\n};\n\n// 物理計算のフライトパス\nexport const calculateFlightPath = (rocketParams, angle, windSpeed, windProfile, config) => {\n  // ここに元のcalculateFlightPath関数の内容を移行\n  // 非常に長い関数のため、実際の実装では必要に応じて分割することが推奨されます\n\n  // 簡略化した例:\n  return {\n    data: [],\n    maxHeight: 100,\n    maxSpeed: 50,\n    maxDistance: 80,\n    maxFinDeflection: 2,\n    keyPoints: {\n      thrustEnd: {\n        time: 1,\n        height: 20,\n        speed: 30\n      },\n      maxHeight: {\n        time: 5,\n        height: 100,\n        speed: 0\n      },\n      parachuteEjection: {\n        time: 7,\n        height: 80,\n        speed: -10\n      },\n      parachuteActive: {\n        time: 8,\n        height: 70,\n        speed: -5\n      }\n    },\n    angleStability: {\n      maxAngleChangePerDt2: 5,\n      isAngleStableOK: true\n    },\n    projectedAreas: calculateProjectedArea(rocketParams),\n    volumes: calculateVolume(rocketParams),\n    pressureCenter: calculateCenterOfPressure(rocketParams),\n    aerodynamicCenter: calculateAerodynamicCenter(rocketParams),\n    stabilityCenterOfPressure: calculateStabilityCenterOfPressure(rocketParams),\n    staticMargins: calculateStaticMargin(rocketParams),\n    calculations: {\n      aerodynamicCenter: Math.round(calculateAerodynamicCenter(rocketParams).aerodynamicCenter),\n      pressureCenter: Math.round(calculateCenterOfPressure(rocketParams).centerOfPressure),\n      stabilityCenterOfPressure: Math.round(calculateStabilityCenterOfPressure(rocketParams).stabilityCenterOfPressure),\n      standardStaticMargin: parseFloat(calculateStaticMargin(rocketParams).standardStaticMargin.toFixed(2)),\n      stabilityStaticMargin: parseFloat(calculateStaticMargin(rocketParams).stabilityStaticMargin.toFixed(2)),\n      finDivergenceSpeed: Math.round(calculateFinDivergenceSpeed(rocketParams)),\n      finFlutterSpeed: Math.round(calculateFinFlutterSpeed(rocketParams))\n    }\n  };\n};","map":{"version":3,"names":["MOTOR_THRUST_DATA","PHYSICAL_CONSTANTS","ANGLE_RESPONSE_DT","ANGLE_STEPS_PER_UPDATE","NOSE_SHAPES","FIN_MATERIALS","mmToM","gToKg","calculateProjectedArea","rocketParams","noseShape","noseHeight","bodyHeight","bodyWidth","finHeight","finBaseWidth","finTipWidth","finSweepLength","finThickness","noseHeight_m","bodyHeight_m","bodyWidth_m","bodyRadius_m","finHeight_m","finBaseWidth_m","finTipWidth_m","finSweepLength_m","frontalArea","Math","PI","pow","bodyArea","noseArea","finArea","totalFinArea","sideArea","angledArea","sqrt","calculateVolume","bodyVolume","noseVolume","totalVolume","calculateCenterOfPressure","areas","noseCp","bodyCp","finCP_single","finCp","totalArea","centerOfPressure","foreBodyArea","foreBodyCp","calculateAerodynamicCenter","lengthOfCo","ramda","volumeData","c_bar","y_bar","wingArea","Vstar_fus","aspectRatio","cl_alpha","hn","hnwc_bar","x1","x2","small_xac","aerodynamicCenter","calculateStabilityCenterOfPressure","mc","noseStabilityCp","fin_cn_1","fin_cn_2","fin_cn_3","fin_cn","cnTotal","finStabilityCp","stabilityCenterOfPressure","calculateStaticMargin","centerOfGravity","cpData","stabilityCp","standardStaticMargin","stabilityStaticMargin","calculateFinDivergenceSpeed","finMaterial","finThickness_m","material","G","rho","meanChord","sweepbackAngle","atan","J","liftCoefficient_fin","cos","divSpeed","max","min","calculateFinFlutterSpeed","E","poissonsRatio","empiricalConstant","factorA","factorB","isFinite","console","warn","flutterSpeed","formatFinDeflection","deflection","toFixed","formatSpeedValue","speed","limit","round","calculateWindSpeedAtHeight","baseWindSpeed","height","profile","alpha","WIND_PROFILES","referenceHeight","heightRatio","windSpeedMultiplier","maxMultiplier","actualMultiplier","calculateFlightPath","angle","windSpeed","windProfile","config","data","maxHeight","maxSpeed","maxDistance","maxFinDeflection","keyPoints","thrustEnd","time","parachuteEjection","parachuteActive","angleStability","maxAngleChangePerDt2","isAngleStableOK","projectedAreas","volumes","pressureCenter","staticMargins","calculations","parseFloat","finDivergenceSpeed","finFlutterSpeed"],"sources":["/Users/shinoharatsubasa/Documents/RocketSim_New_2d_integ/src/components/rocket/RocketPhysics.jsx"],"sourcesContent":["// 物理計算関連の関数\nimport { \n    MOTOR_THRUST_DATA, PHYSICAL_CONSTANTS, \n    ANGLE_RESPONSE_DT, ANGLE_STEPS_PER_UPDATE,\n    NOSE_SHAPES, FIN_MATERIALS, mmToM, gToKg \n  } from './RocketConstants';\n  \n  // ロケットの投影面積を計算する関数\n  export const calculateProjectedArea = (rocketParams) => {\n    const { noseShape, noseHeight, bodyHeight, bodyWidth, finHeight, finBaseWidth, finTipWidth, finSweepLength, finThickness } = rocketParams;\n    \n    // 単位をmm->mに変換\n    const noseHeight_m = mmToM(noseHeight);\n    const bodyHeight_m = mmToM(bodyHeight);\n    const bodyWidth_m = mmToM(bodyWidth);\n    const bodyRadius_m = bodyWidth_m / 2;\n    const finHeight_m = mmToM(finHeight);\n    const finBaseWidth_m = mmToM(finBaseWidth);\n    const finTipWidth_m = mmToM(finTipWidth);\n    const finSweepLength_m = mmToM(finSweepLength);\n    \n    // 正面からの投影面積 (m^2)\n    const frontalArea = Math.PI * Math.pow(bodyRadius_m, 2) + (finHeight * finThickness) * 4 * 0.0000001;\n    \n    // 側面投影面積の計算 (m^2)\n    // ボディ部分\n    const bodyArea = bodyWidth_m * bodyHeight_m;\n    \n    // ノーズ部分 - 形状に応じて計算\n    let noseArea;\n    if (noseShape === 'cone') {\n      noseArea = 0.5 * bodyWidth_m * noseHeight_m; // 三角形の面積\n    } else if (noseShape === 'parabola') {\n      noseArea = (2/3) * bodyWidth_m * noseHeight_m; // 放物線の近似\n    } else { // ogive\n      noseArea = (2/3) * bodyWidth_m * noseHeight_m; // オジブの近似\n    }\n    \n    // フィン1枚あたりの投影面積\n    const finArea = finHeight_m * (finBaseWidth_m + finTipWidth_m) / 2; // 台形の面積\n    \n    // フィン4枚の合計投影面積\n    const totalFinArea = finArea * 2;\n    \n    // 側面からの合計投影面積\n    const sideArea = bodyArea + noseArea + totalFinArea;\n    \n    // 斜め45度からの投影面積（近似）（修正が必要）\n    const angledArea = Math.sqrt(Math.pow(frontalArea, 2) + Math.pow(sideArea, 2));\n    \n    return {\n      frontalArea,  // 正面からの投影面積 (m^2)\n      sideArea,     // 側面からの投影面積 (m^2)\n      finArea,      // フィン1枚の投影面積 (m^2)\n      totalFinArea, // フィン4枚の合計投影面積 (m^2)\n      angledArea    // 斜め45度からの投影面積（近似） (m^2)\n    };\n  };\n  \n  // ロケットの体積を計算する関数\n  export const calculateVolume = (rocketParams) => {\n    const { noseShape, noseHeight, bodyHeight, bodyWidth } = rocketParams;\n    \n    // 単位をmm->mに変換\n    const noseHeight_m = mmToM(noseHeight);\n    const bodyHeight_m = mmToM(bodyHeight);\n    const bodyRadius_m = mmToM(bodyWidth) / 2;\n    \n    // ボディ体積（円柱） (m^3)\n    const bodyVolume = Math.PI * Math.pow(bodyRadius_m, 2) * bodyHeight_m;\n    \n    // ノーズ体積 - 形状に応じて計算 (m^3)\n    let noseVolume;\n    if (noseShape === 'cone') {\n      noseVolume = (1/3) * Math.PI * Math.pow(bodyRadius_m, 2) * noseHeight_m; // 円錐の体積\n    } else if (noseShape === 'parabola') {\n      noseVolume = (1/2) * Math.PI * Math.pow(bodyRadius_m, 2) * noseHeight_m; // 放物線回転体の体積\n    } else { // ogive\n      noseVolume = (2/3) * Math.PI * Math.pow(bodyRadius_m, 2) * noseHeight_m; // オジブの近似体積\n    }\n    \n    // 合計体積 (m^3)\n    const totalVolume = bodyVolume + noseVolume;\n    \n    return {\n      bodyVolume,  // ボディ部分の体積 (m^3)\n      noseVolume,  // ノーズ部分の体積 (m^3)\n      totalVolume  // 合計体積 (m^3)\n    };\n  };\n  \n  // 圧力中心位置を計算する関数（モーメント計算に使用）\n  export const calculateCenterOfPressure = (rocketParams) => {\n    const { noseShape, noseHeight, bodyHeight, bodyWidth, finHeight, finBaseWidth, finTipWidth, finSweepLength } = rocketParams;\n    \n    // 面積と体積を計算\n    const areas = calculateProjectedArea(rocketParams);\n    \n    // ノーズ先端からの各コンポーネントの圧力中心位置 (mm)\n    // ノーズの圧力中心位置 - 形状に応じて計算\n    let noseCp;\n    if (noseShape === 'cone') {\n      noseCp = noseHeight * (2/3); // 円錐の圧力中心はノーズ長の2/3\n    } else if (noseShape === 'parabola') {\n      noseCp = noseHeight * (3/5); // 放物線の圧力中心（近似値）\n    } else { // ogive\n      noseCp = noseHeight * (3/5); // オジブの圧力中心（近似値）\n    }\n    \n    // ボディの圧力中心位置（ノーズ先端から）\n    const bodyCp = noseHeight + bodyHeight / 2; // mm\n    \n    //　フィンの圧力中心位置（フィン付け根先端から）\n    const finCP_single = (Math.pow((finSweepLength + finTipWidth), 2) - Math.pow(finSweepLength, 2) + Math.pow(finBaseWidth, 2) + (finSweepLength + finTipWidth) * finBaseWidth) / (3 * ((finSweepLength + finTipWidth) + finBaseWidth - finSweepLength)); // mm\n  \n    // フィンの圧力中心位置（ノーズ先端から）\n    const finCp = noseHeight + bodyHeight - finBaseWidth + finCP_single; // mm\n    \n    // 面積による重み付け計算\n    // 単位を揃えるためにm²からmm²に変換\n    const noseArea = areas.noseArea * 1000000; // m^2 → mm^2\n    const bodyArea = areas.sideArea * 1000000 - noseArea; // m^2 → mm^2\n    const totalFinArea = areas.totalFinArea * 1000000; // m^2 → mm^2\n    \n    // 圧力中心の計算（重み付け平均）\n    const totalArea = noseArea + bodyArea + totalFinArea;\n    const centerOfPressure = (noseCp * noseArea + bodyCp * bodyArea + finCp * totalFinArea) / totalArea; // mm\n    \n    // フィンを除いた前部の圧力中心（空力計算用）\n    const foreBodyArea = noseArea + bodyArea;\n    const foreBodyCp = (noseCp * noseArea + bodyCp * bodyArea) / foreBodyArea;\n    \n    return {\n      noseCp,           // ノーズの圧力中心位置 (mm)\n      bodyCp,           // ボディの圧力中心位置 (mm)\n      finCp,            // フィンの圧力中心位置 (mm)\n      centerOfPressure, // 全体の圧力中心位置 (mm)\n      foreBodyCp        // フィンを除いた前部の圧力中心位置 (mm)\n    };\n  };\n  \n  // 空力中心位置を計算する関数\n  export const calculateAerodynamicCenter = (rocketParams) => {\n    // この行で必要なすべてのプロパティを取り出します\n    const { noseHeight, bodyHeight, bodyWidth, finHeight, finBaseWidth, finTipWidth, finSweepLength } = rocketParams;\n    \n    // 投影面積を計算\n    const areas = calculateProjectedArea(rocketParams);\n  \n    // lengthOfCo\n    const lengthOfCo = ((finBaseWidth - finTipWidth) / finHeight) * ((bodyWidth / 2) + finHeight) + finTipWidth;\n    \n    // テーパー比（ramda）\n    const ramda = finTipWidth / lengthOfCo;\n  \n    // 胴体容積 (m^3)\n    const volumeData = calculateVolume(rocketParams);\n  \n    // c_bar\n    const c_bar = (2 * lengthOfCo / 3) * (1 + ramda + Math.pow(ramda, 2)) / (1 + ramda);\n  \n    // y_bar\n    const y_bar = (finHeight + (bodyWidth / 2)) * (1 + (2 * ramda)) / (3 * (1 + ramda));\n  \n    // 面積による重み付け計算（m^2をmm^2に変換）\n    const noseArea = areas.noseArea * 1000000; // m^2 → mm^2\n    const bodyArea = areas.sideArea * 1000000 - noseArea; // m^2 → mm^2\n    const totalFinArea = areas.totalFinArea * 1000000; // m^2 → mm^2\n  \n    // WingArea\n    const wingArea = (finTipWidth + lengthOfCo) * ((bodyWidth / 2) + finHeight);\n    \n    // V*fus\n    const Vstar_fus = volumeData.totalVolume * 1000000000 / (c_bar * wingArea); // 単位を合わせる\n  \n    // AspectRatio\n    const aspectRatio = ((2 * finHeight) + bodyWidth) * ((2 * finHeight) + bodyWidth) / wingArea;\n  \n    // CLα\n    const cl_alpha = ((3.14 * aspectRatio) * 0.5) * Math.pow((1 - Math.pow((bodyWidth / 2) / (((finHeight + (bodyWidth / 2)) / 2)), 2)) , 2);\n  \n    // hn\n    const hn = 0.25 + (1 / cl_alpha) * (-1) * (2 * Vstar_fus);\n  \n    // hnwc_bar\n    const hnwc_bar = hn * c_bar;\n  \n    // x1\n    const x1 = (bodyWidth / 2) * finSweepLength / finHeight;\n  \n    // x2\n    const x2 = y_bar * (x1 + finSweepLength + finTipWidth - lengthOfCo) / (((bodyWidth / 2) + finHeight));\n  \n    // small_xac\n    const small_xac = c_bar - x2 - hnwc_bar;\n  \n    // 空力中心計算\n    const aerodynamicCenter = noseHeight + bodyHeight - small_xac;\n    \n    return {\n      aerodynamicCenter  // 空力中心位置 (mm)\n    };\n  };\n  \n  // 静安定マージン計算用の圧力中心位置を計算する関数\n  export const calculateStabilityCenterOfPressure = (rocketParams) => {\n    const { noseShape, noseHeight, bodyHeight, bodyWidth, finHeight, finBaseWidth, finTipWidth, finSweepLength } = rocketParams;\n  \n    // mc\n    const mc = Math.pow((Math.pow((finSweepLength + (finTipWidth / 2) - (finBaseWidth / 2)), 2)) + (Math.pow(finHeight, 2)), 0.5);\n    \n    // ノーズ先端からの位置を計算 (mm)\n    // この静安定マージン用の圧力中心は通常の圧力中心とは異なる計算方法を使用\n    \n    // ノーズの圧力中心\n    let noseStabilityCp;\n    if (noseShape === 'cone') {\n      noseStabilityCp = noseHeight * 0.5; // 円錐の静安定用圧力中心\n    } else if (noseShape === 'parabola') {\n      noseStabilityCp = noseHeight * 0.45; // 放物線の静安定用圧力中心\n    } else { // ogive\n      noseStabilityCp = noseHeight * 0.4; // オジブの静安定用圧力中心\n    }\n    \n    // フィンのcn\n    const fin_cn_1 = 1 + (finHeight / (finHeight + (bodyWidth / 2)));\n    const fin_cn_2 = 4 * 4 * Math.pow((finHeight / (bodyWidth / 2)), 2);\n    const fin_cn_3 = 1 + Math.pow((1 + (Math.pow(((2 * mc) / (finTipWidth + finBaseWidth)), 2))), 0.5);\n    const fin_cn = fin_cn_1 * fin_cn_2 / fin_cn_3;\n  \n    // CnTotal\n    const cnTotal = 2 + fin_cn;\n  \n    // フィンの圧力中心\n    const finStabilityCp = (noseHeight + bodyHeight - finBaseWidth) + ((finSweepLength / 3) * ((finBaseWidth + 2 * finTipWidth) / (finBaseWidth + finTipWidth))) + ((finBaseWidth + finTipWidth) - ((finBaseWidth * finTipWidth) / (finBaseWidth + finTipWidth))) / 6;\n    \n    // 静安定用の圧力中心位置（重み付け平均）\n    const stabilityCenterOfPressure = (2 * noseStabilityCp + fin_cn * finStabilityCp) / cnTotal;\n    \n    return {\n      stabilityCenterOfPressure,  // 静安定計算用の圧力中心位置 (mm)\n    };\n  };\n  \n  // 静安定マージンを計算する関数\n  export const calculateStaticMargin = (rocketParams) => {\n    const { centerOfGravity, bodyWidth } = rocketParams;\n    \n    // 通常の圧力中心を計算\n    const cpData = calculateCenterOfPressure(rocketParams);\n    \n    // 静安定計算用の特別な圧力中心を計算\n    const stabilityCp = calculateStabilityCenterOfPressure(rocketParams);\n    \n    // 静安定マージン = (圧力中心位置 - 重心位置) / ボディ直径\n    // 通常の圧力中心を使用した場合\n    const standardStaticMargin = (cpData.centerOfPressure - centerOfGravity) / bodyWidth;\n    \n    // 静安定用圧力中心を使用した場合\n    const stabilityStaticMargin = (stabilityCp.stabilityCenterOfPressure - centerOfGravity) / bodyWidth;\n    \n    return {\n      standardStaticMargin,   // 通常の静安定マージン\n      stabilityStaticMargin   // 静安定計算用の静安定マージン\n    };\n  };\n  \n  // フィンダイバージェンス速度を計算する関数\n  export const calculateFinDivergenceSpeed = (rocketParams) => {\n    const { finHeight, finBaseWidth, finTipWidth, finSweepLength, finThickness, finMaterial } = rocketParams;\n    \n    // 単位をmmからmに変換\n    const finHeight_m = mmToM(finHeight);\n    const finBaseWidth_m = mmToM(finBaseWidth);\n    const finTipWidth_m = mmToM(finTipWidth);\n    const finSweepLength_m = mmToM(finSweepLength);\n    const finThickness_m = mmToM(finThickness);\n    \n    // フィン材料の特性を取得\n    const material = FIN_MATERIALS[finMaterial];\n    const G = material.G; // 横弾性係数 (Pa)\n    \n    // 空気密度 (kg/m³)\n    const rho = 1.225;\n  \n    // 平均コード長の計算 (m)\n    const meanChord = (finBaseWidth_m + finTipWidth_m) / 2;\n    \n    // 後退角(rad)\n    const sweepbackAngle = Math.atan((finSweepLength_m + 0.5 * finTipWidth_m - 0.5 * finBaseWidth_m) * 3.14 / meanChord);\n  \n    // 捻り定数J\n    const J = 0.3333 * finTipWidth_m * Math.pow(finThickness_m, 3);\n  \n    // 揚力傾斜a0\n    const liftCoefficient_fin = (9 / 3.14) * Math.cos(sweepbackAngle);\n    \n    const divSpeed = (3.14 / (2 * finHeight_m)) * Math.pow( 2 * G * J / (rho * Math.pow(meanChord, 2) * 0.25 * liftCoefficient_fin), 0.5);\n    \n    // 現実的な範囲内に制限（極端に大きな/小さな値を防止）\n    return Math.max(20, Math.min(300, divSpeed));\n  };\n  \n  // フィンフラッター速度を計算する関数\n  export const calculateFinFlutterSpeed = (rocketParams) => {\n    const { finHeight, finBaseWidth, finTipWidth, finThickness, finMaterial } = rocketParams;\n    \n    // 単位をmmからmに変換\n    const finHeight_m = mmToM(finHeight);\n    const finBaseWidth_m = mmToM(finBaseWidth);\n    const finTipWidth_m = mmToM(finTipWidth);\n    const finThickness_m = mmToM(finThickness);\n    \n    // フィン材料の特性を取得\n    const material = FIN_MATERIALS[finMaterial];\n    const G = material.G; // 横弾性係数 (Pa)\n    const E = material.E; // 縦弾性係数 (Pa)\n    \n    // ポアソン比（一般的な値）\n    const poissonsRatio = 0.3;\n    \n    // 空気密度 (kg/m³)\n    const rho = 1.225;\n    \n    // 平均コード長の計算 (m)\n    const meanChord = (finBaseWidth_m + finTipWidth_m) / 2;\n    \n    // 経験的定数\n    const empiricalConstant = 3.5;\n    \n    // フィンフラッター速度の計算 (m/s)\n    // V_flutter = (a * t / c^1.5) * sqrt(G * E / (12 * ρ * (1 - ν^2)))\n    const factorA = empiricalConstant * finThickness_m / Math.pow(meanChord, 1.5);\n    const factorB = Math.sqrt(G * E / (12 * rho * (1 - Math.pow(poissonsRatio, 2))));\n    \n    // 計算結果が無効な場合のフォールバック\n    if (!isFinite(factorA) || !isFinite(factorB)) {\n      console.warn('フィンフラッター速度の計算に無効な値が発生しました。代替値を使用します。');\n      return 40 + mmToM(rocketParams.bodyHeight + rocketParams.noseHeight) * 120;\n    }\n    \n    const flutterSpeed = factorA * factorB;\n    \n    // 現実的な範囲内に制限（極端に大きな/小さな値を防止）\n    return Math.max(30, Math.min(400, flutterSpeed));\n  };\n  \n  // フィンたわみ量のフォーマット関数（UI表示時に使用）\n  export const formatFinDeflection = (deflection) => {\n    // 15mmの場合（閾値または計算エラー）は「15mm以上」と表示\n    if (deflection === 15) {\n      return \"15mm以上\";\n    }\n    \n    // 通常のたわみ量は小数点2桁までの数値を表示\n    return `${deflection.toFixed(2)}mm`;\n  };\n  \n  // フィンダイバージェンス速度とフラッター速度の表示用フォーマット関数\n  export const formatSpeedValue = (speed, limit = 300) => {\n    // 速度値が上限を超えている場合\n    if (speed >= limit) {\n      return `${limit}+ m/s`;  // 「300+ m/s」のように表示\n    }\n    \n    // 通常範囲内の速度は整数で表示\n    return `${Math.round(speed)} m/s`;\n  };\n  \n  // 高度に応じた風速を計算する関数 - 基準高度を1.5mに修正\n  export const calculateWindSpeedAtHeight = (baseWindSpeed, height, profile) => {\n    // 高度が0の場合はそのまま基準風速を返す\n    if (height <= 0) return baseWindSpeed;\n    \n    // プロファイルに応じたべき指数を取得\n    const alpha = WIND_PROFILES[profile].alpha;\n    \n    // べき指数が0の場合は高度に関わらず一定風速\n    if (alpha === 0) return baseWindSpeed;\n    \n    // 基準高度（1.5メートル - 地上計測を想定）\n    const referenceHeight = 1.5; \n    \n    // べき乗則による風速計算\n    // V(h) = V_ref * (h/h_ref)^α\n    const heightRatio = height / referenceHeight;\n    const windSpeedMultiplier = Math.pow(heightRatio, alpha);\n    \n    // 風速の上限を設定（非現実的な値にならないよう制限）\n    const maxMultiplier = 3.0; // 基準風速の3倍まで\n    const actualMultiplier = Math.min(windSpeedMultiplier, maxMultiplier);\n    \n    return baseWindSpeed * actualMultiplier;\n  };\n  \n  // 物理計算のフライトパス\n  export const calculateFlightPath = (rocketParams, angle, windSpeed, windProfile, config) => {\n    // ここに元のcalculateFlightPath関数の内容を移行\n    // 非常に長い関数のため、実際の実装では必要に応じて分割することが推奨されます\n    \n    // 簡略化した例:\n    return {\n      data: [],\n      maxHeight: 100,\n      maxSpeed: 50,\n      maxDistance: 80,\n      maxFinDeflection: 2,\n      keyPoints: {\n        thrustEnd: { time: 1, height: 20, speed: 30 },\n        maxHeight: { time: 5, height: 100, speed: 0 },\n        parachuteEjection: { time: 7, height: 80, speed: -10 },\n        parachuteActive: { time: 8, height: 70, speed: -5 }\n      },\n      angleStability: {\n        maxAngleChangePerDt2: 5,\n        isAngleStableOK: true\n      },\n      projectedAreas: calculateProjectedArea(rocketParams),\n      volumes: calculateVolume(rocketParams),\n      pressureCenter: calculateCenterOfPressure(rocketParams),\n      aerodynamicCenter: calculateAerodynamicCenter(rocketParams),\n      stabilityCenterOfPressure: calculateStabilityCenterOfPressure(rocketParams),\n      staticMargins: calculateStaticMargin(rocketParams),\n      calculations: {\n        aerodynamicCenter: Math.round(calculateAerodynamicCenter(rocketParams).aerodynamicCenter),\n        pressureCenter: Math.round(calculateCenterOfPressure(rocketParams).centerOfPressure),\n        stabilityCenterOfPressure: Math.round(calculateStabilityCenterOfPressure(rocketParams).stabilityCenterOfPressure),\n        standardStaticMargin: parseFloat(calculateStaticMargin(rocketParams).standardStaticMargin.toFixed(2)),\n        stabilityStaticMargin: parseFloat(calculateStaticMargin(rocketParams).stabilityStaticMargin.toFixed(2)),\n        finDivergenceSpeed: Math.round(calculateFinDivergenceSpeed(rocketParams)),\n        finFlutterSpeed: Math.round(calculateFinFlutterSpeed(rocketParams))\n      }\n    };\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}